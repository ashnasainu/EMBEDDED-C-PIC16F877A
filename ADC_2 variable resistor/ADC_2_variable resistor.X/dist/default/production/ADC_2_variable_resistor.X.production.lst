

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu May 15 21:22:34 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,space=0,delta=2
    11                           	psect	clrtext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    21                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=3
    25                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=3
    26                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 12/10/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F877A Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0004                     fsr             equ	4
    70     0004                     fsr0            equ	4
    71     0000                     indf            equ	0
    72     0000                     indf0           equ	0
    73     0002                     pc              equ	2
    74     0002                     pcl             equ	2
    75     000A                     pclath          equ	10
    76     0003                     status          equ	3
    77     0000                     INDF            equ	0	;# 
    78     0001                     TMR0            equ	1	;# 
    79     0002                     PCL             equ	2	;# 
    80     0003                     STATUS          equ	3	;# 
    81     0004                     FSR             equ	4	;# 
    82     0005                     PORTA           equ	5	;# 
    83     0006                     PORTB           equ	6	;# 
    84     0007                     PORTC           equ	7	;# 
    85     0008                     PORTD           equ	8	;# 
    86     0009                     PORTE           equ	9	;# 
    87     000A                     PCLATH          equ	10	;# 
    88     000B                     INTCON          equ	11	;# 
    89     000C                     PIR1            equ	12	;# 
    90     000D                     PIR2            equ	13	;# 
    91     000E                     TMR1            equ	14	;# 
    92     000E                     TMR1L           equ	14	;# 
    93     000F                     TMR1H           equ	15	;# 
    94     0010                     T1CON           equ	16	;# 
    95     0011                     TMR2            equ	17	;# 
    96     0012                     T2CON           equ	18	;# 
    97     0013                     SSPBUF          equ	19	;# 
    98     0014                     SSPCON          equ	20	;# 
    99     0015                     CCPR1           equ	21	;# 
   100     0015                     CCPR1L          equ	21	;# 
   101     0016                     CCPR1H          equ	22	;# 
   102     0017                     CCP1CON         equ	23	;# 
   103     0018                     RCSTA           equ	24	;# 
   104     0019                     TXREG           equ	25	;# 
   105     001A                     RCREG           equ	26	;# 
   106     001B                     CCPR2           equ	27	;# 
   107     001B                     CCPR2L          equ	27	;# 
   108     001C                     CCPR2H          equ	28	;# 
   109     001D                     CCP2CON         equ	29	;# 
   110     001E                     ADRESH          equ	30	;# 
   111     001F                     ADCON0          equ	31	;# 
   112     0081                     OPTION_REG      equ	129	;# 
   113     0085                     TRISA           equ	133	;# 
   114     0086                     TRISB           equ	134	;# 
   115     0087                     TRISC           equ	135	;# 
   116     0088                     TRISD           equ	136	;# 
   117     0089                     TRISE           equ	137	;# 
   118     008C                     PIE1            equ	140	;# 
   119     008D                     PIE2            equ	141	;# 
   120     008E                     PCON            equ	142	;# 
   121     0091                     SSPCON2         equ	145	;# 
   122     0092                     PR2             equ	146	;# 
   123     0093                     SSPADD          equ	147	;# 
   124     0094                     SSPSTAT         equ	148	;# 
   125     0098                     TXSTA           equ	152	;# 
   126     0099                     SPBRG           equ	153	;# 
   127     009C                     CMCON           equ	156	;# 
   128     009D                     CVRCON          equ	157	;# 
   129     009E                     ADRESL          equ	158	;# 
   130     009F                     ADCON1          equ	159	;# 
   131     010C                     EEDATA          equ	268	;# 
   132     010D                     EEADR           equ	269	;# 
   133     010E                     EEDATH          equ	270	;# 
   134     010F                     EEADRH          equ	271	;# 
   135     018C                     EECON1          equ	396	;# 
   136     018D                     EECON2          equ	397	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     PORTA           equ	5	;# 
   143     0006                     PORTB           equ	6	;# 
   144     0007                     PORTC           equ	7	;# 
   145     0008                     PORTD           equ	8	;# 
   146     0009                     PORTE           equ	9	;# 
   147     000A                     PCLATH          equ	10	;# 
   148     000B                     INTCON          equ	11	;# 
   149     000C                     PIR1            equ	12	;# 
   150     000D                     PIR2            equ	13	;# 
   151     000E                     TMR1            equ	14	;# 
   152     000E                     TMR1L           equ	14	;# 
   153     000F                     TMR1H           equ	15	;# 
   154     0010                     T1CON           equ	16	;# 
   155     0011                     TMR2            equ	17	;# 
   156     0012                     T2CON           equ	18	;# 
   157     0013                     SSPBUF          equ	19	;# 
   158     0014                     SSPCON          equ	20	;# 
   159     0015                     CCPR1           equ	21	;# 
   160     0015                     CCPR1L          equ	21	;# 
   161     0016                     CCPR1H          equ	22	;# 
   162     0017                     CCP1CON         equ	23	;# 
   163     0018                     RCSTA           equ	24	;# 
   164     0019                     TXREG           equ	25	;# 
   165     001A                     RCREG           equ	26	;# 
   166     001B                     CCPR2           equ	27	;# 
   167     001B                     CCPR2L          equ	27	;# 
   168     001C                     CCPR2H          equ	28	;# 
   169     001D                     CCP2CON         equ	29	;# 
   170     001E                     ADRESH          equ	30	;# 
   171     001F                     ADCON0          equ	31	;# 
   172     0081                     OPTION_REG      equ	129	;# 
   173     0085                     TRISA           equ	133	;# 
   174     0086                     TRISB           equ	134	;# 
   175     0087                     TRISC           equ	135	;# 
   176     0088                     TRISD           equ	136	;# 
   177     0089                     TRISE           equ	137	;# 
   178     008C                     PIE1            equ	140	;# 
   179     008D                     PIE2            equ	141	;# 
   180     008E                     PCON            equ	142	;# 
   181     0091                     SSPCON2         equ	145	;# 
   182     0092                     PR2             equ	146	;# 
   183     0093                     SSPADD          equ	147	;# 
   184     0094                     SSPSTAT         equ	148	;# 
   185     0098                     TXSTA           equ	152	;# 
   186     0099                     SPBRG           equ	153	;# 
   187     009C                     CMCON           equ	156	;# 
   188     009D                     CVRCON          equ	157	;# 
   189     009E                     ADRESL          equ	158	;# 
   190     009F                     ADCON1          equ	159	;# 
   191     010C                     EEDATA          equ	268	;# 
   192     010D                     EEADR           equ	269	;# 
   193     010E                     EEDATH          equ	270	;# 
   194     010F                     EEADRH          equ	271	;# 
   195     018C                     EECON1          equ	396	;# 
   196     018D                     EECON2          equ	397	;# 
   197     0000                     INDF            equ	0	;# 
   198     0001                     TMR0            equ	1	;# 
   199     0002                     PCL             equ	2	;# 
   200     0003                     STATUS          equ	3	;# 
   201     0004                     FSR             equ	4	;# 
   202     0005                     PORTA           equ	5	;# 
   203     0006                     PORTB           equ	6	;# 
   204     0007                     PORTC           equ	7	;# 
   205     0008                     PORTD           equ	8	;# 
   206     0009                     PORTE           equ	9	;# 
   207     000A                     PCLATH          equ	10	;# 
   208     000B                     INTCON          equ	11	;# 
   209     000C                     PIR1            equ	12	;# 
   210     000D                     PIR2            equ	13	;# 
   211     000E                     TMR1            equ	14	;# 
   212     000E                     TMR1L           equ	14	;# 
   213     000F                     TMR1H           equ	15	;# 
   214     0010                     T1CON           equ	16	;# 
   215     0011                     TMR2            equ	17	;# 
   216     0012                     T2CON           equ	18	;# 
   217     0013                     SSPBUF          equ	19	;# 
   218     0014                     SSPCON          equ	20	;# 
   219     0015                     CCPR1           equ	21	;# 
   220     0015                     CCPR1L          equ	21	;# 
   221     0016                     CCPR1H          equ	22	;# 
   222     0017                     CCP1CON         equ	23	;# 
   223     0018                     RCSTA           equ	24	;# 
   224     0019                     TXREG           equ	25	;# 
   225     001A                     RCREG           equ	26	;# 
   226     001B                     CCPR2           equ	27	;# 
   227     001B                     CCPR2L          equ	27	;# 
   228     001C                     CCPR2H          equ	28	;# 
   229     001D                     CCP2CON         equ	29	;# 
   230     001E                     ADRESH          equ	30	;# 
   231     001F                     ADCON0          equ	31	;# 
   232     0081                     OPTION_REG      equ	129	;# 
   233     0085                     TRISA           equ	133	;# 
   234     0086                     TRISB           equ	134	;# 
   235     0087                     TRISC           equ	135	;# 
   236     0088                     TRISD           equ	136	;# 
   237     0089                     TRISE           equ	137	;# 
   238     008C                     PIE1            equ	140	;# 
   239     008D                     PIE2            equ	141	;# 
   240     008E                     PCON            equ	142	;# 
   241     0091                     SSPCON2         equ	145	;# 
   242     0092                     PR2             equ	146	;# 
   243     0093                     SSPADD          equ	147	;# 
   244     0094                     SSPSTAT         equ	148	;# 
   245     0098                     TXSTA           equ	152	;# 
   246     0099                     SPBRG           equ	153	;# 
   247     009C                     CMCON           equ	156	;# 
   248     009D                     CVRCON          equ	157	;# 
   249     009E                     ADRESL          equ	158	;# 
   250     009F                     ADCON1          equ	159	;# 
   251     010C                     EEDATA          equ	268	;# 
   252     010D                     EEADR           equ	269	;# 
   253     010E                     EEDATH          equ	270	;# 
   254     010F                     EEADRH          equ	271	;# 
   255     018C                     EECON1          equ	396	;# 
   256     018D                     EECON2          equ	397	;# 
   257     0000                     INDF            equ	0	;# 
   258     0001                     TMR0            equ	1	;# 
   259     0002                     PCL             equ	2	;# 
   260     0003                     STATUS          equ	3	;# 
   261     0004                     FSR             equ	4	;# 
   262     0005                     PORTA           equ	5	;# 
   263     0006                     PORTB           equ	6	;# 
   264     0007                     PORTC           equ	7	;# 
   265     0008                     PORTD           equ	8	;# 
   266     0009                     PORTE           equ	9	;# 
   267     000A                     PCLATH          equ	10	;# 
   268     000B                     INTCON          equ	11	;# 
   269     000C                     PIR1            equ	12	;# 
   270     000D                     PIR2            equ	13	;# 
   271     000E                     TMR1            equ	14	;# 
   272     000E                     TMR1L           equ	14	;# 
   273     000F                     TMR1H           equ	15	;# 
   274     0010                     T1CON           equ	16	;# 
   275     0011                     TMR2            equ	17	;# 
   276     0012                     T2CON           equ	18	;# 
   277     0013                     SSPBUF          equ	19	;# 
   278     0014                     SSPCON          equ	20	;# 
   279     0015                     CCPR1           equ	21	;# 
   280     0015                     CCPR1L          equ	21	;# 
   281     0016                     CCPR1H          equ	22	;# 
   282     0017                     CCP1CON         equ	23	;# 
   283     0018                     RCSTA           equ	24	;# 
   284     0019                     TXREG           equ	25	;# 
   285     001A                     RCREG           equ	26	;# 
   286     001B                     CCPR2           equ	27	;# 
   287     001B                     CCPR2L          equ	27	;# 
   288     001C                     CCPR2H          equ	28	;# 
   289     001D                     CCP2CON         equ	29	;# 
   290     001E                     ADRESH          equ	30	;# 
   291     001F                     ADCON0          equ	31	;# 
   292     0081                     OPTION_REG      equ	129	;# 
   293     0085                     TRISA           equ	133	;# 
   294     0086                     TRISB           equ	134	;# 
   295     0087                     TRISC           equ	135	;# 
   296     0088                     TRISD           equ	136	;# 
   297     0089                     TRISE           equ	137	;# 
   298     008C                     PIE1            equ	140	;# 
   299     008D                     PIE2            equ	141	;# 
   300     008E                     PCON            equ	142	;# 
   301     0091                     SSPCON2         equ	145	;# 
   302     0092                     PR2             equ	146	;# 
   303     0093                     SSPADD          equ	147	;# 
   304     0094                     SSPSTAT         equ	148	;# 
   305     0098                     TXSTA           equ	152	;# 
   306     0099                     SPBRG           equ	153	;# 
   307     009C                     CMCON           equ	156	;# 
   308     009D                     CVRCON          equ	157	;# 
   309     009E                     ADRESL          equ	158	;# 
   310     009F                     ADCON1          equ	159	;# 
   311     010C                     EEDATA          equ	268	;# 
   312     010D                     EEADR           equ	269	;# 
   313     010E                     EEDATH          equ	270	;# 
   314     010F                     EEADRH          equ	271	;# 
   315     018C                     EECON1          equ	396	;# 
   316     018D                     EECON2          equ	397	;# 
   317                           
   318                           	psect	idataBANK1
   319     038C                     __pidataBANK1:
   320                           
   321                           ;initializer for lcd_int@F1356
   322     038C  3420               	retlw	32
   323     038D  3400               	retlw	0
   324     038E  3400               	retlw	0
   325     038F  3400               	retlw	0
   326     0390  3400               	retlw	0
   327     0391  3400               	retlw	0
   328     0392  3400               	retlw	0
   329     0393  3400               	retlw	0
   330     0394  3400               	retlw	0
   331     0395  3400               	retlw	0
   332     0396  3400               	retlw	0
   333     0397  3400               	retlw	0
   334     0398  3400               	retlw	0
   335     0399  3400               	retlw	0
   336     039A  3400               	retlw	0
   337     039B  3400               	retlw	0
   338     001E                     _ADRESH         set	30
   339     000C                     _PIR1bits       set	12
   340     001F                     _ADCON0bits     set	31
   341     001F                     _ADCON0         set	31
   342     0006                     _PORTBbits      set	6
   343     0006                     _PORTB          set	6
   344     009E                     _ADRESL         set	158
   345     009F                     _ADCON1         set	159
   346     0086                     _TRISB          set	134
   347                           
   348                           	psect	strings
   349     0003                     __pstrings:
   350     0003                     stringtab:
   351     0003                     __stringtab:
   352                           
   353                           ;	String table - string pointers are 1 byte each
   354     0003  1BFF               	btfsc	btemp+1,7
   355     0004  280D               	ljmp	stringcode
   356     0005  1383               	bcf	3,7
   357     0006  187F               	btfsc	btemp+1,0
   358     0007  1783               	bsf	3,7
   359     0008  0800               	movf	0,w
   360     0009  0A84               	incf	4,f
   361     000A  1903               	skipnz
   362     000B  0AFF               	incf	btemp+1,f
   363     000C  0008               	return
   364     000D                     stringcode:
   365     000D                     stringdir:
   366     000D  3000               	movlw	high stringdir
   367     000E  008A               	movwf	10
   368     000F  0804               	movf	4,w
   369     0010  0A84               	incf	4,f
   370     0011  0782               	addwf	2,f
   371     0012                     __stringbase:
   372     0012  3400               	retlw	0
   373     0013                     __end_of__stringtab:
   374     0013                     STR_1:
   375     0013  3450               	retlw	80	;'P'
   376     0014  346F               	retlw	111	;'o'
   377     0015  3474               	retlw	116	;'t'
   378     0016  3420               	retlw	32	;' '
   379     0017  3476               	retlw	118	;'v'
   380     0018  3461               	retlw	97	;'a'
   381     0019  346C               	retlw	108	;'l'
   382     001A  3475               	retlw	117	;'u'
   383     001B  3465               	retlw	101	;'e'
   384     001C  343A               	retlw	58	;':'
   385     001D  3400               	retlw	0
   386     001E                     STR_3:
   387     001E  3425               	retlw	37	;'%'
   388     001F  3464               	retlw	100	;'d'
   389     0020  3400               	retlw	0
   390     0013                     STR_2           equ	STR_1
   391                           
   392                           	psect	cinit
   393     07DE                     start_initialization:	
   394                           ; #config settings
   395                           
   396     07DE                     __initialization:
   397                           
   398                           ; Initialize objects allocated to BANK1
   399     07DE  1383               	bcf	3,7	;select IRP bank0
   400     07DF  30DF               	movlw	low (__pdataBANK1+16)
   401     07E0  00FD               	movwf	btemp+-1
   402     07E1  3003               	movlw	high __pidataBANK1
   403     07E2  00FE               	movwf	btemp
   404     07E3  308C               	movlw	low __pidataBANK1
   405     07E4  00FF               	movwf	btemp+1
   406     07E5  30CF               	movlw	low __pdataBANK1
   407     07E6  0084               	movwf	4
   408     07E7  120A  118A  23C4  120A  118A  	fcall	init_ram0
   409                           
   410                           ; Clear objects allocated to BANK1
   411     07EC  30A0               	movlw	low __pbssBANK1
   412     07ED  0084               	movwf	4
   413     07EE  30CF               	movlw	low (__pbssBANK1+47)
   414     07EF  120A  118A  236B  120A  118A  	fcall	clear_ram0
   415                           
   416                           ; Clear objects allocated to BANK0
   417     07F4  305B               	movlw	low __pbssBANK0
   418     07F5  0084               	movwf	4
   419     07F6  3070               	movlw	low (__pbssBANK0+21)
   420     07F7  120A  118A  236B  120A  118A  	fcall	clear_ram0
   421     07FC                     end_of_initialization:	
   422                           ;End of C runtime variable initialization code
   423                           
   424     07FC                     __end_of__initialization:
   425     07FC  0183               	clrf	3
   426     07FD  120A  118A  2DF0   	ljmp	_main	;jump to C main() function
   427                           
   428                           	psect	bssBANK0
   429     005B                     __pbssBANK0:
   430     005B                     _width:
   431     005B                     	ds	2
   432     005D                     _prec:
   433     005D                     	ds	2
   434     005F                     _f:
   435     005F                     	ds	2
   436     0061                     _e:
   437     0061                     	ds	2
   438     0063                     _d:
   439     0063                     	ds	2
   440     0065                     _c:
   441     0065                     	ds	2
   442     0067                     _b:
   443     0067                     	ds	2
   444     0069                     _a:
   445     0069                     	ds	2
   446     006B                     _ADC_value:
   447     006B                     	ds	2
   448     006D                     _ADC_data:
   449     006D                     	ds	2
   450     006F                     _flags:
   451     006F                     	ds	1
   452                           
   453                           	psect	bssBANK1
   454     00A0                     __pbssBANK1:
   455     00A0                     _dbuf:
   456     00A0                     	ds	32
   457     00C0                     _ADC_string:
   458     00C0                     	ds	15
   459                           
   460                           	psect	dataBANK1
   461     00CF                     __pdataBANK1:
   462     00CF                     lcd_int@F1356:
   463     00CF                     	ds	16
   464                           
   465                           	psect	inittext
   466     03C0                     init_fetch0:	
   467                           ;	Called with low address in FSR and high address in W
   468                           
   469     03C0  087E               	movf	btemp,w
   470     03C1  008A               	movwf	10
   471     03C2  087F               	movf	btemp+1,w
   472     03C3  0082               	movwf	2
   473     03C4                     init_ram0:	
   474                           ;Called with:
   475                           ;	high address of idata address in btemp 
   476                           ;	low address of idata address in btemp+1 
   477                           ;	low address of data in FSR
   478                           ;	high address + 1 of data in btemp-1
   479                           
   480     03C4  120A  118A  23C0  120A  118A  	fcall	init_fetch0
   481     03C9  0080               	movwf	0
   482     03CA  0A84               	incf	4,f
   483     03CB  0804               	movf	4,w
   484     03CC  067D               	xorwf	btemp+-1,w
   485     03CD  1903               	btfsc	3,2
   486     03CE  3400               	retlw	0
   487     03CF  0AFF               	incf	btemp+1,f
   488     03D0  1903               	btfsc	3,2
   489     03D1  0AFE               	incf	btemp,f
   490     03D2  2BC4               	goto	init_ram0
   491                           
   492                           	psect	clrtext
   493     036B                     clear_ram0:	
   494                           ;	Called with FSR containing the base address, and
   495                           ;	W with the last address+1
   496                           
   497     036B  0064               	clrwdt	;clear the watchdog before getting into this loop
   498     036C                     clrloop0:
   499     036C  0180               	clrf	0	;clear RAM location pointed to by FSR
   500     036D  0A84               	incf	4,f	;increment pointer
   501     036E  0604               	xorwf	4,w	;XOR with final address
   502     036F  1903               	btfsc	3,2	;have we reached the end yet?
   503     0370  3400               	retlw	0	;all done for this memory range, return
   504     0371  0604               	xorwf	4,w	;XOR again to restore value
   505     0372  2B6C               	goto	clrloop0	;do the next byte
   506                           
   507                           	psect	cstackCOMMON
   508     0070                     __pcstackCOMMON:
   509     0070                     ?_lcd_initialise:
   510     0070                     ?_ADC_initialise:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ?_lcd_command:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?_putch:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ?_main:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_lcd_data:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ?_ADC_read:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_fputc:	
   529                           ; 2 bytes @ 0x0
   530                           
   531     0070                     ?___awdiv:	
   532                           ; 2 bytes @ 0x0
   533                           
   534     0070                     ?___awmod:	
   535                           ; 2 bytes @ 0x0
   536                           
   537     0070                     putch@c:	
   538                           ; 2 bytes @ 0x0
   539                           
   540     0070                     ADC_read@a:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ___awdiv@divisor:	
   544                           ; 2 bytes @ 0x0
   545                           
   546     0070                     ___awmod@divisor:	
   547                           ; 2 bytes @ 0x0
   548                           
   549     0070                     fputc@c:	
   550                           ; 2 bytes @ 0x0
   551                           
   552     0070                     ??_ADC_initialise:	
   553                           ; 2 bytes @ 0x0
   554                           
   555     0070                     ??_lcd_command:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     0070                     ??_putch:	
   559                           ; 1 bytes @ 0x0
   560                           
   561     0070                     ??_lcd_data:	
   562                           ; 1 bytes @ 0x0
   563                           
   564                           
   565                           ; 1 bytes @ 0x0
   566     0070                     	ds	2
   567     0072                     lcd_data@data:
   568     0072                     lcd_command@cmnd:	
   569                           ; 1 bytes @ 0x2
   570                           
   571     0072                     ___awdiv@dividend:	
   572                           ; 1 bytes @ 0x2
   573                           
   574     0072                     ___awmod@dividend:	
   575                           ; 2 bytes @ 0x2
   576                           
   577     0072                     fputc@fp:	
   578                           ; 2 bytes @ 0x2
   579                           
   580     0072                     ??_ADC_read:	
   581                           ; 2 bytes @ 0x2
   582                           
   583                           
   584                           ; 1 bytes @ 0x2
   585     0072                     	ds	1
   586     0073                     ?_lcd_set_cursor:
   587     0073                     ?_lcd_string:	
   588                           ; 1 bytes @ 0x3
   589                           
   590     0073                     lcd_set_cursor@a:	
   591                           ; 1 bytes @ 0x3
   592                           
   593     0073                     lcd_string@str:	
   594                           ; 2 bytes @ 0x3
   595                           
   596     0073                     ??_lcd_initialise:	
   597                           ; 2 bytes @ 0x3
   598                           
   599                           
   600                           ; 1 bytes @ 0x3
   601     0073                     	ds	1
   602     0074                     ___awdiv@counter:
   603     0074                     ___awmod@counter:	
   604                           ; 1 bytes @ 0x4
   605                           
   606     0074                     ??_fputc:	
   607                           ; 1 bytes @ 0x4
   608                           
   609     0074                     ??___awdiv:	
   610                           ; 1 bytes @ 0x4
   611                           
   612     0074                     ??___awmod:	
   613                           ; 1 bytes @ 0x4
   614                           
   615                           
   616                           ; 1 bytes @ 0x4
   617     0074                     	ds	1
   618     0075                     lcd_string@i:
   619     0075                     ___awdiv@sign:	
   620                           ; 1 bytes @ 0x5
   621                           
   622     0075                     ___awmod@sign:	
   623                           ; 1 bytes @ 0x5
   624                           
   625     0075                     lcd_set_cursor@b:	
   626                           ; 1 bytes @ 0x5
   627                           
   628     0075                     ??_lcd_string:	
   629                           ; 2 bytes @ 0x5
   630                           
   631                           
   632                           ; 1 bytes @ 0x5
   633     0075                     	ds	1
   634     0076                     ?_abs:
   635     0076                     ___awdiv@quotient:	
   636                           ; 2 bytes @ 0x6
   637                           
   638     0076                     abs@a:	
   639                           ; 2 bytes @ 0x6
   640                           
   641                           
   642                           ; 2 bytes @ 0x6
   643     0076                     	ds	1
   644     0077                     lcd_set_cursor@cmnd:
   645     0077                     ??_lcd_set_cursor:	
   646                           ; 2 bytes @ 0x7
   647                           
   648                           
   649                           ; 1 bytes @ 0x7
   650     0077                     	ds	1
   651     0078                     ??_abs:
   652                           
   653                           ; 1 bytes @ 0x8
   654     0078                     	ds	5
   655     007D                     vfprintf@cfmt:
   656     007D                     ??_vfprintf:	
   657                           ; 1 bytes @ 0xD
   658                           
   659                           
   660                           ; 1 bytes @ 0xD
   661     007D                     	ds	1
   662     007E                     ??_integer_string:
   663     007E                     ??_main:	
   664                           ; 1 bytes @ 0xE
   665                           
   666                           
   667                           	psect	cstackBANK0
   668     0020                     __pcstackBANK0:	
   669                           ; 1 bytes @ 0xE
   670                           
   671     0020                     ?_vfpfcnvrt:
   672     0020                     vfpfcnvrt@fp:	
   673                           ; 1 bytes @ 0x0
   674                           
   675                           
   676                           ; 2 bytes @ 0x0
   677     0020                     	ds	2
   678     0022                     vfpfcnvrt@fmt:
   679                           
   680                           ; 1 bytes @ 0x2
   681     0022                     	ds	1
   682     0023                     vfpfcnvrt@ap:
   683                           
   684                           ; 1 bytes @ 0x3
   685     0023                     	ds	1
   686     0024                     ??_vfpfcnvrt:
   687                           
   688                           ; 1 bytes @ 0x4
   689     0024                     	ds	2
   690     0026                     vfpfcnvrt@done:
   691                           
   692                           ; 1 bytes @ 0x6
   693     0026                     	ds	1
   694     0027                     vfpfcnvrt@cp:
   695                           
   696                           ; 1 bytes @ 0x7
   697     0027                     	ds	1
   698     0028                     vfpfcnvrt@convarg:
   699                           
   700                           ; 4 bytes @ 0x8
   701     0028                     	ds	4
   702     002C                     vfpfcnvrt@c:
   703                           
   704                           ; 1 bytes @ 0xC
   705     002C                     	ds	1
   706     002D                     ?_vfprintf:
   707     002D                     vfprintf@fp:	
   708                           ; 2 bytes @ 0xD
   709                           
   710                           
   711                           ; 2 bytes @ 0xD
   712     002D                     	ds	2
   713     002F                     vfprintf@fmt:
   714                           
   715                           ; 1 bytes @ 0xF
   716     002F                     	ds	1
   717     0030                     vfprintf@ap:
   718                           
   719                           ; 1 bytes @ 0x10
   720     0030                     	ds	1
   721     0031                     ?_sprintf:
   722     0031                     sprintf@s:	
   723                           ; 2 bytes @ 0x11
   724                           
   725                           
   726                           ; 1 bytes @ 0x11
   727     0031                     	ds	1
   728     0032                     sprintf@fmt:
   729                           
   730                           ; 1 bytes @ 0x12
   731     0032                     	ds	3
   732     0035                     ??_sprintf:
   733                           
   734                           ; 1 bytes @ 0x15
   735     0035                     	ds	1
   736     0036                     sprintf@ap:
   737                           
   738                           ; 1 bytes @ 0x16
   739     0036                     	ds	1
   740     0037                     sprintf@f:
   741                           
   742                           ; 11 bytes @ 0x17
   743     0037                     	ds	11
   744     0042                     ?_integer_string:
   745     0042                     integer_string@value:	
   746                           ; 1 bytes @ 0x22
   747                           
   748                           
   749                           ; 2 bytes @ 0x22
   750     0042                     	ds	2
   751     0044                     integer_string@string:
   752                           
   753                           ; 1 bytes @ 0x24
   754     0044                     	ds	1
   755     0045                     ?_lcd_int:
   756     0045                     lcd_int@value:	
   757                           ; 1 bytes @ 0x25
   758                           
   759                           
   760                           ; 2 bytes @ 0x25
   761     0045                     	ds	2
   762     0047                     ??_lcd_int:
   763                           
   764                           ; 1 bytes @ 0x27
   765     0047                     	ds	4
   766     004B                     lcd_int@string:
   767                           
   768                           ; 16 bytes @ 0x2B
   769     004B                     	ds	16
   770                           
   771                           	psect	maintext
   772     05F0                     __pmaintext:	
   773 ;;
   774 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   775 ;;
   776 ;; *************** function _main *****************
   777 ;; Defined at:
   778 ;;		line 11 in file "main.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;		None
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : B00/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   792 ;;      Params:         0       0       0       0       0
   793 ;;      Locals:         0       0       0       0       0
   794 ;;      Temps:          0       0       0       0       0
   795 ;;      Totals:         0       0       0       0       0
   796 ;;Total ram usage:        0 bytes
   797 ;; Hardware stack levels required when called: 7
   798 ;; This function calls:
   799 ;;		_ADC_initialise
   800 ;;		_ADC_read
   801 ;;		_lcd_initialise
   802 ;;		_lcd_int
   803 ;;		_lcd_set_cursor
   804 ;;		_lcd_string
   805 ;; This function is called by:
   806 ;;		Startup code after reset
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810     05F0                     _main:	
   811                           ;psect for function _main
   812                           
   813     05F0                     l1314:	
   814                           ;incstack = 0
   815                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   816                           
   817                           
   818                           ;main.c: 13:     TRISB=0x00;
   819     05F0  1683               	bsf	3,5	;RP0=1, select bank1
   820     05F1  1303               	bcf	3,6	;RP1=0, select bank1
   821     05F2  0186               	clrf	6	;volatile
   822     05F3                     l1316:
   823                           
   824                           ;main.c: 14:     lcd_initialise();
   825     05F3  120A  118A  23AD  120A  118A  	fcall	_lcd_initialise
   826     05F8                     l1318:
   827                           
   828                           ;main.c: 15:     ADC_initialise();
   829     05F8  120A  118A  2373  120A  118A  	fcall	_ADC_initialise
   830     05FD                     l1320:
   831                           
   832                           ;main.c: 18:     {;main.c: 19:         ADC_data =ADC_read(0);
   833     05FD  3000               	movlw	0
   834     05FE  00F0               	movwf	ADC_read@a
   835     05FF  00F1               	movwf	ADC_read@a+1
   836     0600  120A  118A  24F9  120A  118A  	fcall	_ADC_read
   837     0605  0871               	movf	?_ADC_read+1,w
   838     0606  1283               	bcf	3,5	;RP0=0, select bank0
   839     0607  1303               	bcf	3,6	;RP1=0, select bank0
   840     0608  00EE               	movwf	_ADC_data+1
   841     0609  0870               	movf	?_ADC_read,w
   842     060A  00ED               	movwf	_ADC_data
   843     060B                     l1322:
   844                           
   845                           ;main.c: 20:         lcd_set_cursor(1,0);
   846     060B  3001               	movlw	1
   847     060C  00F3               	movwf	lcd_set_cursor@a
   848     060D  3000               	movlw	0
   849     060E  00F4               	movwf	lcd_set_cursor@a+1
   850     060F  3000               	movlw	0
   851     0610  00F5               	movwf	lcd_set_cursor@b
   852     0611  00F6               	movwf	lcd_set_cursor@b+1
   853     0612  120A  118A  241B  120A  118A  	fcall	_lcd_set_cursor
   854     0617                     l1324:
   855                           
   856                           ;main.c: 21:         lcd_string("Pot value:");
   857     0617  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   858     0618  00F3               	movwf	lcd_string@str
   859     0619  3080               	movlw	128
   860     061A  00F4               	movwf	lcd_string@str+1
   861     061B  120A  118A  2442  120A  118A  	fcall	_lcd_string
   862     0620                     l1326:
   863                           
   864                           ;main.c: 22:         lcd_int(ADC_data);
   865     0620  1283               	bcf	3,5	;RP0=0, select bank0
   866     0621  1303               	bcf	3,6	;RP1=0, select bank0
   867     0622  086E               	movf	_ADC_data+1,w
   868     0623  00C6               	movwf	lcd_int@value+1
   869     0624  086D               	movf	_ADC_data,w
   870     0625  00C5               	movwf	lcd_int@value
   871     0626  120A  118A  246B  120A  118A  	fcall	_lcd_int
   872     062B                     l1328:
   873                           
   874                           ;main.c: 24:         ADC_data =ADC_read(1);
   875     062B  3001               	movlw	1
   876     062C  00F0               	movwf	ADC_read@a
   877     062D  3000               	movlw	0
   878     062E  00F1               	movwf	ADC_read@a+1
   879     062F  120A  118A  24F9  120A  118A  	fcall	_ADC_read
   880     0634  0871               	movf	?_ADC_read+1,w
   881     0635  1283               	bcf	3,5	;RP0=0, select bank0
   882     0636  1303               	bcf	3,6	;RP1=0, select bank0
   883     0637  00EE               	movwf	_ADC_data+1
   884     0638  0870               	movf	?_ADC_read,w
   885     0639  00ED               	movwf	_ADC_data
   886     063A                     l1330:
   887                           
   888                           ;main.c: 25:         lcd_set_cursor(2,0);
   889     063A  3002               	movlw	2
   890     063B  00F3               	movwf	lcd_set_cursor@a
   891     063C  3000               	movlw	0
   892     063D  00F4               	movwf	lcd_set_cursor@a+1
   893     063E  3000               	movlw	0
   894     063F  00F5               	movwf	lcd_set_cursor@b
   895     0640  00F6               	movwf	lcd_set_cursor@b+1
   896     0641  120A  118A  241B  120A  118A  	fcall	_lcd_set_cursor
   897     0646                     l1332:
   898                           
   899                           ;main.c: 26:         lcd_string("Pot value:");
   900     0646  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   901     0647  00F3               	movwf	lcd_string@str
   902     0648  3080               	movlw	128
   903     0649  00F4               	movwf	lcd_string@str+1
   904     064A  120A  118A  2442  120A  118A  	fcall	_lcd_string
   905     064F                     l1334:
   906                           
   907                           ;main.c: 27:         lcd_int(ADC_data);
   908     064F  1283               	bcf	3,5	;RP0=0, select bank0
   909     0650  1303               	bcf	3,6	;RP1=0, select bank0
   910     0651  086E               	movf	_ADC_data+1,w
   911     0652  00C6               	movwf	lcd_int@value+1
   912     0653  086D               	movf	_ADC_data,w
   913     0654  00C5               	movwf	lcd_int@value
   914     0655  120A  118A  246B  120A  118A  	fcall	_lcd_int
   915     065A  2DFD               	goto	l1320
   916     065B  120A  118A  2800   	ljmp	start
   917     065E                     __end_of_main:
   918                           
   919                           	psect	text1
   920     041B                     __ptext1:	
   921 ;; *************** function _lcd_set_cursor *****************
   922 ;; Defined at:
   923 ;;		line 21 in file "LCD.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  a               2    3[COMMON] int 
   926 ;;  b               2    5[COMMON] int 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  cmnd            2    7[COMMON] int 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0, pclath, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   938 ;;      Params:         4       0       0       0       0
   939 ;;      Locals:         2       0       0       0       0
   940 ;;      Temps:          0       0       0       0       0
   941 ;;      Totals:         6       0       0       0       0
   942 ;;Total ram usage:        6 bytes
   943 ;; Hardware stack levels used: 1
   944 ;; Hardware stack levels required when called: 1
   945 ;; This function calls:
   946 ;;		_lcd_command
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952     041B                     _lcd_set_cursor:	
   953                           ;psect for function _lcd_set_cursor
   954                           
   955     041B                     l1294:	
   956                           ;incstack = 0
   957                           ; Regs used in _lcd_set_cursor: [wreg+status,2+status,0+pclath+cstack]
   958                           
   959                           
   960                           ;LCD.c: 21: void lcd_set_cursor(int a, int b);LCD.c: 22: {;LCD.c: 23:     int cmnd=0x00;
   961     041B  01F7               	clrf	lcd_set_cursor@cmnd
   962     041C  01F8               	clrf	lcd_set_cursor@cmnd+1
   963     041D                     l1296:
   964                           
   965                           ;LCD.c: 24:     if(a==1)
   966     041D  0373               	decf	lcd_set_cursor@a,w
   967     041E  0474               	iorwf	lcd_set_cursor@a+1,w
   968     041F  1D03               	btfss	3,2
   969     0420  2C22               	goto	u881
   970     0421  2C23               	goto	u880
   971     0422                     u881:
   972     0422  2C28               	goto	l1300
   973     0423                     u880:
   974     0423                     l1298:
   975                           
   976                           ;LCD.c: 25:     {;LCD.c: 26:         cmnd=0x80;
   977     0423  3080               	movlw	128
   978     0424  00F7               	movwf	lcd_set_cursor@cmnd
   979     0425  3000               	movlw	0
   980     0426  00F8               	movwf	lcd_set_cursor@cmnd+1
   981                           
   982                           ;LCD.c: 27:     }
   983     0427  2C33               	goto	l1304
   984     0428                     l1300:
   985     0428  3002               	movlw	2
   986     0429  0673               	xorwf	lcd_set_cursor@a,w
   987     042A  0474               	iorwf	lcd_set_cursor@a+1,w
   988     042B  1D03               	btfss	3,2
   989     042C  2C2E               	goto	u891
   990     042D  2C2F               	goto	u890
   991     042E                     u891:
   992     042E  2C33               	goto	l1304
   993     042F                     u890:
   994     042F                     l1302:
   995                           
   996                           ;LCD.c: 29:     {;LCD.c: 30:         cmnd=0xC0;
   997     042F  30C0               	movlw	192
   998     0430  00F7               	movwf	lcd_set_cursor@cmnd
   999     0431  3000               	movlw	0
  1000     0432  00F8               	movwf	lcd_set_cursor@cmnd+1
  1001     0433                     l1304:
  1002                           
  1003                           ;LCD.c: 32:     cmnd=cmnd+b;
  1004     0433  0875               	movf	lcd_set_cursor@b,w
  1005     0434  0777               	addwf	lcd_set_cursor@cmnd,w
  1006     0435  00F7               	movwf	lcd_set_cursor@cmnd
  1007     0436  0876               	movf	lcd_set_cursor@b+1,w
  1008     0437  1803               	skipnc
  1009     0438  0A76               	incf	lcd_set_cursor@b+1,w
  1010     0439  0778               	addwf	lcd_set_cursor@cmnd+1,w
  1011     043A  00F8               	movwf	lcd_set_cursor@cmnd+1
  1012     043B                     l1306:
  1013                           
  1014                           ;LCD.c: 33:     lcd_command(cmnd);
  1015     043B  0877               	movf	lcd_set_cursor@cmnd,w
  1016     043C  120A  118A  2497  120A  118A  	fcall	_lcd_command
  1017     0441                     l47:
  1018     0441  0008               	return
  1019     0442                     __end_of_lcd_set_cursor:
  1020                           
  1021                           	psect	text2
  1022     046B                     __ptext2:	
  1023 ;; *************** function _lcd_int *****************
  1024 ;; Defined at:
  1025 ;;		line 79 in file "LCD.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  value           2   37[BANK0 ] int 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  string         16   43[BANK0 ] unsigned char [16]
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1039 ;;      Params:         0       2       0       0       0
  1040 ;;      Locals:         0      16       0       0       0
  1041 ;;      Temps:          0       4       0       0       0
  1042 ;;      Totals:         0      22       0       0       0
  1043 ;;Total ram usage:       22 bytes
  1044 ;; Hardware stack levels used: 1
  1045 ;; Hardware stack levels required when called: 6
  1046 ;; This function calls:
  1047 ;;		_integer_string
  1048 ;;		_lcd_string
  1049 ;; This function is called by:
  1050 ;;		_main
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054     046B                     _lcd_int:	
  1055                           ;psect for function _lcd_int
  1056                           
  1057     046B                     l1308:	
  1058                           ;incstack = 0
  1059                           ; Regs used in _lcd_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1060                           
  1061                           
  1062                           ;LCD.c: 79: void lcd_int(int value);LCD.c: 80: {;LCD.c: 81:     unsigned char string[16]
      +                          =" ";
  1063     046B  30CF               	movlw	lcd_int@F1356& (0+255)
  1064     046C  0084               	movwf	4
  1065     046D  304B               	movlw	low lcd_int@string
  1066     046E  1283               	bcf	3,5	;RP0=0, select bank0
  1067     046F  1303               	bcf	3,6	;RP1=0, select bank0
  1068     0470  00C7               	movwf	??_lcd_int
  1069     0471  3010               	movlw	16
  1070     0472  00C8               	movwf	??_lcd_int+1
  1071     0473                     u900:
  1072     0473  1383               	bcf	3,7	;select IRP bank1
  1073     0474  0800               	movf	0,w
  1074     0475  00C9               	movwf	??_lcd_int+2
  1075     0476  0A04               	incf	4,w
  1076     0477  00CA               	movwf	??_lcd_int+3
  1077     0478  0847               	movf	??_lcd_int,w
  1078     0479  0084               	movwf	4
  1079     047A  0849               	movf	??_lcd_int+2,w
  1080     047B  0080               	movwf	0
  1081     047C  0A04               	incf	4,w
  1082     047D  00C7               	movwf	??_lcd_int
  1083     047E  084A               	movf	??_lcd_int+3,w
  1084     047F  0084               	movwf	4
  1085     0480  0BC8               	decfsz	??_lcd_int+1,f
  1086     0481  2C73               	goto	u900
  1087     0482                     l1310:
  1088                           
  1089                           ;LCD.c: 82:     integer_string(value,string);
  1090     0482  0846               	movf	lcd_int@value+1,w
  1091     0483  00C3               	movwf	integer_string@value+1
  1092     0484  0845               	movf	lcd_int@value,w
  1093     0485  00C2               	movwf	integer_string@value
  1094     0486  304B               	movlw	(low (lcd_int@string| 0))& (0+255)
  1095     0487  00C4               	movwf	integer_string@string
  1096     0488  120A  118A  237C  120A  118A  	fcall	_integer_string
  1097     048D                     l1312:
  1098                           
  1099                           ;LCD.c: 83:     lcd_string(string);
  1100     048D  304B               	movlw	(low (lcd_int@string| 0))& (0+255)
  1101     048E  00F3               	movwf	lcd_string@str
  1102     048F  3000               	movlw	0
  1103     0490  00F4               	movwf	lcd_string@str+1
  1104     0491  120A  118A  2442  120A  118A  	fcall	_lcd_string
  1105     0496                     l64:
  1106     0496  0008               	return
  1107     0497                     __end_of_lcd_int:
  1108                           
  1109                           	psect	text3
  1110     0442                     __ptext3:	
  1111 ;; *************** function _lcd_string *****************
  1112 ;; Defined at:
  1113 ;;		line 70 in file "LCD.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  str             2    3[COMMON] PTR const unsigned char 
  1116 ;;		 -> lcd_int@string(16), STR_2(11), STR_1(11), 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  i               1    5[COMMON] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1128 ;;      Params:         2       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0
  1131 ;;      Totals:         3       0       0       0       0
  1132 ;;Total ram usage:        3 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; Hardware stack levels required when called: 1
  1135 ;; This function calls:
  1136 ;;		_lcd_data
  1137 ;; This function is called by:
  1138 ;;		_main
  1139 ;;		_lcd_int
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143     0442                     _lcd_string:	
  1144                           ;psect for function _lcd_string
  1145                           
  1146     0442                     l1238:	
  1147                           ;incstack = 0
  1148                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1149                           
  1150                           
  1151                           ;LCD.c: 70: void lcd_string(const unsigned char *str);LCD.c: 71: {;LCD.c: 72:     unsign
      +                          ed char i;;LCD.c: 73:     for(i=0;str[i]!='\0';i++)
  1152     0442  01F5               	clrf	lcd_string@i
  1153     0443  2C57               	goto	l1244
  1154     0444                     l1240:
  1155                           
  1156                           ;LCD.c: 74:     {;LCD.c: 75:         lcd_data(str[i]);
  1157     0444  0875               	movf	lcd_string@i,w
  1158     0445  0773               	addwf	lcd_string@str,w
  1159     0446  0084               	movwf	4
  1160     0447  0874               	movf	lcd_string@str+1,w
  1161     0448  1803               	skipnc
  1162     0449  0A74               	incf	lcd_string@str+1,w
  1163     044A  00FF               	movwf	btemp+1
  1164     044B  120A  118A  2003  120A  118A  	fcall	stringtab
  1165     0450  120A  118A  24C8  120A  118A  	fcall	_lcd_data
  1166     0455                     l1242:
  1167                           
  1168                           ;LCD.c: 76:     }
  1169     0455  3001               	movlw	1
  1170     0456  07F5               	addwf	lcd_string@i,f
  1171     0457                     l1244:
  1172     0457  0875               	movf	lcd_string@i,w
  1173     0458  0773               	addwf	lcd_string@str,w
  1174     0459  0084               	movwf	4
  1175     045A  0874               	movf	lcd_string@str+1,w
  1176     045B  1803               	skipnc
  1177     045C  0A74               	incf	lcd_string@str+1,w
  1178     045D  1283               	bcf	3,5	;RP0=0, select bank0
  1179     045E  1303               	bcf	3,6	;RP1=0, select bank0
  1180     045F  00FF               	movwf	btemp+1
  1181     0460  120A  118A  2003  120A  118A  	fcall	stringtab
  1182     0465  3A00               	xorlw	0
  1183     0466  1D03               	skipz
  1184     0467  2C69               	goto	u831
  1185     0468  2C6A               	goto	u830
  1186     0469                     u831:
  1187     0469  2C44               	goto	l1240
  1188     046A                     u830:
  1189     046A                     l59:
  1190     046A  0008               	return
  1191     046B                     __end_of_lcd_string:
  1192                           
  1193                           	psect	text4
  1194     04C8                     __ptext4:	
  1195 ;; *************** function _lcd_data *****************
  1196 ;; Defined at:
  1197 ;;		line 37 in file "LCD.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  data            1    wreg     unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  data            1    2[COMMON] unsigned char 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1211 ;;      Params:         0       0       0       0       0
  1212 ;;      Locals:         1       0       0       0       0
  1213 ;;      Temps:          2       0       0       0       0
  1214 ;;      Totals:         3       0       0       0       0
  1215 ;;Total ram usage:        3 bytes
  1216 ;; Hardware stack levels used: 1
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_lcd_string
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224     04C8                     _lcd_data:	
  1225                           ;psect for function _lcd_data
  1226                           
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
  1230                           ;lcd_data@data stored from wreg
  1231     04C8  00F2               	movwf	lcd_data@data
  1232     04C9                     l1200:
  1233                           
  1234                           ;LCD.c: 37: void lcd_data(unsigned char data);LCD.c: 38: {;LCD.c: 39:     PORTB=(data&0x
      +                          f0);
  1235     04C9  0872               	movf	lcd_data@data,w
  1236     04CA  39F0               	andlw	240
  1237     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  1238     04CC  1303               	bcf	3,6	;RP1=0, select bank0
  1239     04CD  0086               	movwf	6	;volatile
  1240     04CE                     l1202:
  1241                           
  1242                           ;LCD.c: 40:     PORTBbits.RB0=1;
  1243     04CE  1406               	bsf	6,0	;volatile
  1244     04CF                     l1204:
  1245                           
  1246                           ;LCD.c: 41:     PORTBbits.RB1=0;
  1247     04CF  1086               	bcf	6,1	;volatile
  1248     04D0                     l1206:
  1249                           
  1250                           ;LCD.c: 42:     PORTBbits.RB2=1;
  1251     04D0  1506               	bsf	6,2	;volatile
  1252     04D1                     l1208:
  1253                           
  1254                           ;LCD.c: 43:     _delay((unsigned long)((2)*(20000000/4000.0)));
  1255     04D1  300D               	movlw	13
  1256     04D2  00F1               	movwf	??_lcd_data+1
  1257     04D3  30FB               	movlw	251
  1258     04D4  00F0               	movwf	??_lcd_data
  1259     04D5                     u917:
  1260     04D5  0BF0               	decfsz	??_lcd_data,f
  1261     04D6  2CD5               	goto	u917
  1262     04D7  0BF1               	decfsz	??_lcd_data+1,f
  1263     04D8  2CD5               	goto	u917
  1264     04D9  2CDA               	nop2
  1265     04DA                     l1210:
  1266                           
  1267                           ;LCD.c: 44:     PORTBbits.RB2=0;
  1268     04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1269     04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1270     04DC  1106               	bcf	6,2	;volatile
  1271     04DD                     l1212:
  1272                           
  1273                           ;LCD.c: 45:     PORTB=((data<<4)&0xf0);
  1274     04DD  0872               	movf	lcd_data@data,w
  1275     04DE  00F0               	movwf	??_lcd_data
  1276     04DF  3003               	movlw	3
  1277     04E0                     u825:
  1278     04E0  1003               	clrc
  1279     04E1  0DF0               	rlf	??_lcd_data,f
  1280     04E2  3EFF               	addlw	-1
  1281     04E3  1D03               	skipz
  1282     04E4  2CE0               	goto	u825
  1283     04E5  1003               	clrc
  1284     04E6  0D70               	rlf	??_lcd_data,w
  1285     04E7  39F0               	andlw	240
  1286     04E8  0086               	movwf	6	;volatile
  1287     04E9                     l1214:
  1288                           
  1289                           ;LCD.c: 46:     PORTBbits.RB0=1;
  1290     04E9  1406               	bsf	6,0	;volatile
  1291     04EA                     l1216:
  1292                           
  1293                           ;LCD.c: 47:     PORTBbits.RB1=0;
  1294     04EA  1086               	bcf	6,1	;volatile
  1295     04EB                     l1218:
  1296                           
  1297                           ;LCD.c: 48:     PORTBbits.RB2=1;
  1298     04EB  1506               	bsf	6,2	;volatile
  1299     04EC                     l1220:
  1300                           
  1301                           ;LCD.c: 49:     _delay((unsigned long)((2)*(20000000/4000.0)));
  1302     04EC  300D               	movlw	13
  1303     04ED  00F1               	movwf	??_lcd_data+1
  1304     04EE  30FB               	movlw	251
  1305     04EF  00F0               	movwf	??_lcd_data
  1306     04F0                     u927:
  1307     04F0  0BF0               	decfsz	??_lcd_data,f
  1308     04F1  2CF0               	goto	u927
  1309     04F2  0BF1               	decfsz	??_lcd_data+1,f
  1310     04F3  2CF0               	goto	u927
  1311     04F4  2CF5               	nop2
  1312     04F5                     l1222:
  1313                           
  1314                           ;LCD.c: 50:     PORTBbits.RB2=0;
  1315     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1316     04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1317     04F7  1106               	bcf	6,2	;volatile
  1318     04F8                     l50:
  1319     04F8  0008               	return
  1320     04F9                     __end_of_lcd_data:
  1321                           
  1322                           	psect	text5
  1323     037C                     __ptext5:	
  1324 ;; *************** function _integer_string *****************
  1325 ;; Defined at:
  1326 ;;		line 87 in file "LCD.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  value           2   34[BANK0 ] int 
  1329 ;;  string          1   36[BANK0 ] PTR unsigned char 
  1330 ;;		 -> lcd_int@string(16), 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1342 ;;      Params:         0       3       0       0       0
  1343 ;;      Locals:         0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0
  1345 ;;      Totals:         0       3       0       0       0
  1346 ;;Total ram usage:        3 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 5
  1349 ;; This function calls:
  1350 ;;		_sprintf
  1351 ;; This function is called by:
  1352 ;;		_lcd_int
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356     037C                     _integer_string:	
  1357                           ;psect for function _integer_string
  1358                           
  1359     037C                     l1270:	
  1360                           ;incstack = 0
  1361                           ; Regs used in _integer_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1362                           
  1363                           
  1364                           ;LCD.c: 87: void integer_string(int value,unsigned char *string);LCD.c: 88: {;LCD.c: 89:
      +                               sprintf(string, "%d",value);
  1365     037C  1283               	bcf	3,5	;RP0=0, select bank0
  1366     037D  1303               	bcf	3,6	;RP1=0, select bank0
  1367     037E  0844               	movf	integer_string@string,w
  1368     037F  00B1               	movwf	sprintf@s
  1369     0380  300C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1370     0381  00B2               	movwf	sprintf@fmt
  1371     0382  0843               	movf	integer_string@value+1,w
  1372     0383  00B4               	movwf	?_sprintf+3
  1373     0384  0842               	movf	integer_string@value,w
  1374     0385  00B3               	movwf	?_sprintf+2
  1375     0386  120A  118A  23D3  120A  118A  	fcall	_sprintf
  1376     038B                     l67:
  1377     038B  0008               	return
  1378     038C                     __end_of_integer_string:
  1379                           
  1380                           	psect	text6
  1381     03D3                     __ptext6:	
  1382 ;; *************** function _sprintf *****************
  1383 ;; Defined at:
  1384 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  s               1   17[BANK0 ] PTR unsigned char 
  1387 ;;		 -> lcd_int@string(16), 
  1388 ;;  fmt             1   18[BANK0 ] PTR const unsigned char 
  1389 ;;		 -> STR_3(3), 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  f              11   23[BANK0 ] struct _IO_FILE
  1392 ;;  ret             2    0        int 
  1393 ;;  ap              1   22[BANK0 ] PTR void [1]
  1394 ;;		 -> ?_sprintf(2), 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  2   17[BANK0 ] int 
  1397 ;; Registers used:
  1398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       4       0       0       0
  1405 ;;      Locals:         0      12       0       0       0
  1406 ;;      Temps:          0       1       0       0       0
  1407 ;;      Totals:         0      17       0       0       0
  1408 ;;Total ram usage:       17 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; Hardware stack levels required when called: 4
  1411 ;; This function calls:
  1412 ;;		_vfprintf
  1413 ;; This function is called by:
  1414 ;;		_integer_string
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418     03D3                     _sprintf:	
  1419                           ;psect for function _sprintf
  1420                           
  1421     03D3                     l1224:	
  1422                           ;incstack = 0
  1423                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1424                           
  1425     03D3  3033               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1426     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1427     03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1428     03D6  00B6               	movwf	sprintf@ap
  1429     03D7                     l1226:
  1430     03D7  0831               	movf	sprintf@s,w
  1431     03D8  00B7               	movwf	sprintf@f
  1432     03D9  3000               	movlw	0
  1433     03DA  00B8               	movwf	sprintf@f+1
  1434     03DB                     l1228:
  1435     03DB  01B9               	clrf	sprintf@f+2
  1436     03DC  01BA               	clrf	sprintf@f+3
  1437     03DD                     l1230:
  1438     03DD  01C0               	clrf	sprintf@f+9
  1439     03DE  01C1               	clrf	sprintf@f+10
  1440     03DF                     l1232:
  1441     03DF  3037               	movlw	low sprintf@f
  1442     03E0  00AD               	movwf	vfprintf@fp
  1443     03E1  3000               	movlw	high sprintf@f
  1444     03E2  00AE               	movwf	vfprintf@fp+1
  1445     03E3  0832               	movf	sprintf@fmt,w
  1446     03E4  00AF               	movwf	vfprintf@fmt
  1447     03E5  3036               	movlw	(low (sprintf@ap| 0))& (0+255)
  1448     03E6  00B0               	movwf	vfprintf@ap
  1449     03E7  120A  118A  23F6  120A  118A  	fcall	_vfprintf
  1450     03EC                     l1234:
  1451     03EC  1283               	bcf	3,5	;RP0=0, select bank0
  1452     03ED  1303               	bcf	3,6	;RP1=0, select bank0
  1453     03EE  0839               	movf	sprintf@f+2,w
  1454     03EF  0731               	addwf	sprintf@s,w
  1455     03F0  00B5               	movwf	??_sprintf
  1456     03F1  0835               	movf	??_sprintf,w
  1457     03F2  0084               	movwf	4
  1458     03F3  1383               	bcf	3,7	;select IRP bank0
  1459     03F4  0180               	clrf	0
  1460     03F5                     l656:
  1461     03F5  0008               	return
  1462     03F6                     __end_of_sprintf:
  1463                           
  1464                           	psect	text7
  1465     03F6                     __ptext7:	
  1466 ;; *************** function _vfprintf *****************
  1467 ;; Defined at:
  1468 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  fp              2   13[BANK0 ] PTR struct _IO_FILE
  1471 ;;		 -> sprintf@f(11), 
  1472 ;;  fmt             1   15[BANK0 ] PTR const unsigned char 
  1473 ;;		 -> STR_3(3), 
  1474 ;;  ap              1   16[BANK0 ] PTR PTR void 
  1475 ;;		 -> sprintf@ap(1), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  cfmt            1   13[COMMON] PTR unsigned char 
  1478 ;;		 -> STR_3(3), 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  2   13[BANK0 ] int 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1488 ;;      Params:         0       4       0       0       0
  1489 ;;      Locals:         1       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0
  1491 ;;      Totals:         1       4       0       0       0
  1492 ;;Total ram usage:        5 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 3
  1495 ;; This function calls:
  1496 ;;		_vfpfcnvrt
  1497 ;; This function is called by:
  1498 ;;		_sprintf
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502     03F6                     _vfprintf:	
  1503                           ;psect for function _vfprintf
  1504                           
  1505     03F6                     l1190:	
  1506                           ;incstack = 0
  1507                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1508                           
  1509                           
  1510                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1511     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1512     03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1513     03F8  082F               	movf	vfprintf@fmt,w
  1514     03F9  00FD               	movwf	vfprintf@cfmt
  1515                           
  1516                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1517     03FA  2C0A               	goto	l1194
  1518     03FB                     l1192:
  1519                           
  1520                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1521     03FB  1283               	bcf	3,5	;RP0=0, select bank0
  1522     03FC  1303               	bcf	3,6	;RP1=0, select bank0
  1523     03FD  082D               	movf	vfprintf@fp,w
  1524     03FE  00A0               	movwf	vfpfcnvrt@fp
  1525     03FF  082E               	movf	vfprintf@fp+1,w
  1526     0400  00A1               	movwf	vfpfcnvrt@fp+1
  1527     0401  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1528     0402  00A2               	movwf	vfpfcnvrt@fmt
  1529     0403  0830               	movf	vfprintf@ap,w
  1530     0404  00A3               	movwf	vfpfcnvrt@ap
  1531     0405  120A  118A  26F8  120A  118A  	fcall	_vfpfcnvrt
  1532     040A                     l1194:
  1533                           
  1534                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1535     040A  087D               	movf	vfprintf@cfmt,w
  1536     040B  0084               	movwf	4
  1537     040C  120A  118A  200D  120A  118A  	fcall	stringdir
  1538     0411  3A00               	xorlw	0
  1539     0412  1D03               	skipz
  1540     0413  2C15               	goto	u811
  1541     0414  2C16               	goto	u810
  1542     0415                     u811:
  1543     0415  2BFB               	goto	l1192
  1544     0416                     u810:
  1545     0416                     l1196:
  1546                           
  1547                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1548     0416  1283               	bcf	3,5	;RP0=0, select bank0
  1549     0417  1303               	bcf	3,6	;RP1=0, select bank0
  1550     0418  01AD               	clrf	?_vfprintf
  1551     0419  01AE               	clrf	?_vfprintf+1
  1552     041A                     l700:
  1553     041A  0008               	return
  1554     041B                     __end_of_vfprintf:
  1555                           
  1556                           	psect	text8
  1557     06F8                     __ptext8:	
  1558 ;; *************** function _vfpfcnvrt *****************
  1559 ;; Defined at:
  1560 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1563 ;;		 -> sprintf@f(11), 
  1564 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
  1565 ;;		 -> vfprintf@cfmt(1), 
  1566 ;;  ap              1    3[BANK0 ] PTR PTR void 
  1567 ;;		 -> sprintf@ap(1), 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  convarg         4    8[BANK0 ] struct .
  1570 ;;  c               1   12[BANK0 ] unsigned char 
  1571 ;;  cp              1    7[BANK0 ] PTR unsigned char 
  1572 ;;		 -> STR_3(3), 
  1573 ;;  done            1    6[BANK0 ] _Bool 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1583 ;;      Params:         0       4       0       0       0
  1584 ;;      Locals:         0       7       0       0       0
  1585 ;;      Temps:          0       2       0       0       0
  1586 ;;      Totals:         0      13       0       0       0
  1587 ;;Total ram usage:       13 bytes
  1588 ;; Hardware stack levels used: 1
  1589 ;; Hardware stack levels required when called: 2
  1590 ;; This function calls:
  1591 ;;		___awdiv
  1592 ;;		___awmod
  1593 ;;		_abs
  1594 ;;		_fputc
  1595 ;; This function is called by:
  1596 ;;		_vfprintf
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600     06F8                     _vfpfcnvrt:	
  1601                           ;psect for function _vfpfcnvrt
  1602                           
  1603     06F8                     l1138:	
  1604                           ;incstack = 0
  1605                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1606                           
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1609     06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1610     06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1611     06FA  0822               	movf	vfpfcnvrt@fmt,w
  1612     06FB  0084               	movwf	4
  1613     06FC  0800               	movf	0,w
  1614     06FD  0084               	movwf	4
  1615     06FE  120A  118A  200D  120A  118A  	fcall	stringdir
  1616     0703  3A25               	xorlw	37
  1617     0704  1D03               	skipz
  1618     0705  2F07               	goto	u711
  1619     0706  2F08               	goto	u710
  1620     0707                     u711:
  1621     0707  2FC4               	goto	l1184
  1622     0708                     u710:
  1623     0708                     l1140:
  1624                           
  1625                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1626     0708  0822               	movf	vfpfcnvrt@fmt,w
  1627     0709  0084               	movwf	4
  1628     070A  3001               	movlw	1
  1629     070B  0780               	addwf	0,f
  1630     070C                     l1142:
  1631                           
  1632                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1633     070C  01DB               	clrf	_width
  1634     070D  01DC               	clrf	_width+1
  1635     070E  3000               	movlw	0
  1636     070F  00EF               	movwf	_flags
  1637     0710                     l1144:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1640     0710  30FF               	movlw	255
  1641     0711  00DD               	movwf	_prec
  1642     0712  30FF               	movlw	255
  1643     0713  00DE               	movwf	_prec+1
  1644     0714                     l1146:
  1645                           
  1646                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1647     0714  0822               	movf	vfpfcnvrt@fmt,w
  1648     0715  0084               	movwf	4
  1649     0716  0800               	movf	0,w
  1650     0717  00A7               	movwf	vfpfcnvrt@cp
  1651     0718                     l1148:
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1654     0718  0827               	movf	vfpfcnvrt@cp,w
  1655     0719  0084               	movwf	4
  1656     071A  120A  118A  200D  120A  118A  	fcall	stringdir
  1657     071F  3A64               	xorlw	100
  1658     0720  1903               	skipnz
  1659     0721  2F23               	goto	u721
  1660     0722  2F24               	goto	u720
  1661     0723                     u721:
  1662     0723  2F30               	goto	l1152
  1663     0724                     u720:
  1664     0724                     l1150:
  1665     0724  0827               	movf	vfpfcnvrt@cp,w
  1666     0725  0084               	movwf	4
  1667     0726  120A  118A  200D  120A  118A  	fcall	stringdir
  1668     072B  3A69               	xorlw	105
  1669     072C  1D03               	skipz
  1670     072D  2F2F               	goto	u731
  1671     072E  2F30               	goto	u730
  1672     072F                     u731:
  1673     072F  2FBD               	goto	l1180
  1674     0730                     u730:
  1675     0730                     l1152:
  1676                           
  1677                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1678     0730  0823               	movf	vfpfcnvrt@ap,w
  1679     0731  0084               	movwf	4
  1680     0732  1383               	bcf	3,7	;select IRP bank0
  1681     0733  0800               	movf	0,w
  1682     0734  00FF               	movwf	btemp+1
  1683     0735  3002               	movlw	2
  1684     0736  0780               	addwf	0,f
  1685     0737  087F               	movf	btemp+1,w
  1686     0738  0084               	movwf	4
  1687     0739  0800               	movf	0,w
  1688     073A  00A8               	movwf	vfpfcnvrt@convarg
  1689     073B  0A84               	incf	4,f
  1690     073C  0800               	movf	0,w
  1691     073D  00A9               	movwf	vfpfcnvrt@convarg+1
  1692     073E                     l1154:
  1693                           
  1694                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1695     073E  0822               	movf	vfpfcnvrt@fmt,w
  1696     073F  0084               	movwf	4
  1697     0740  0827               	movf	vfpfcnvrt@cp,w
  1698     0741  3E01               	addlw	1
  1699     0742  0080               	movwf	0
  1700     0743                     l1156:
  1701                           
  1702                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1703     0743  3020               	movlw	32
  1704     0744  00AC               	movwf	vfpfcnvrt@c
  1705     0745                     l1158:
  1706                           
  1707                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1708     0745  1BA9               	btfsc	vfpfcnvrt@convarg+1,7
  1709     0746  2F48               	goto	u741
  1710     0747  2F4A               	goto	u740
  1711     0748                     u741:
  1712     0748  3001               	movlw	1
  1713     0749  2F4B               	goto	u750
  1714     074A                     u740:
  1715     074A  3000               	movlw	0
  1716     074B                     u750:
  1717     074B  00A6               	movwf	vfpfcnvrt@done
  1718     074C                     l1160:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1721     074C  3001               	movlw	1
  1722     074D  02AC               	subwf	vfpfcnvrt@c,f
  1723     074E  082C               	movf	vfpfcnvrt@c,w
  1724     074F  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1725     0750  0084               	movwf	4
  1726     0751  300A               	movlw	10
  1727     0752  00F0               	movwf	___awmod@divisor
  1728     0753  3000               	movlw	0
  1729     0754  00F1               	movwf	___awmod@divisor+1
  1730     0755  0829               	movf	vfpfcnvrt@convarg+1,w
  1731     0756  00F3               	movwf	___awmod@dividend+1
  1732     0757  0828               	movf	vfpfcnvrt@convarg,w
  1733     0758  00F2               	movwf	___awmod@dividend
  1734     0759  120A  118A  2536  120A  118A  	fcall	___awmod
  1735     075E  0871               	movf	?___awmod+1,w
  1736     075F  00F7               	movwf	abs@a+1
  1737     0760  0870               	movf	?___awmod,w
  1738     0761  00F6               	movwf	abs@a
  1739     0762  120A  118A  239C  120A  118A  	fcall	_abs
  1740     0767  0876               	movf	?_abs,w
  1741     0768  3E30               	addlw	48
  1742     0769  1383               	bcf	3,7	;select IRP bank1
  1743     076A  0080               	movwf	0
  1744     076B                     l1162:
  1745                           
  1746                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1747     076B  300A               	movlw	10
  1748     076C  00F0               	movwf	___awdiv@divisor
  1749     076D  3000               	movlw	0
  1750     076E  00F1               	movwf	___awdiv@divisor+1
  1751     076F  1283               	bcf	3,5	;RP0=0, select bank0
  1752     0770  1303               	bcf	3,6	;RP1=0, select bank0
  1753     0771  0829               	movf	vfpfcnvrt@convarg+1,w
  1754     0772  00F3               	movwf	___awdiv@dividend+1
  1755     0773  0828               	movf	vfpfcnvrt@convarg,w
  1756     0774  00F2               	movwf	___awdiv@dividend
  1757     0775  120A  118A  258D  120A  118A  	fcall	___awdiv
  1758     077A  0871               	movf	?___awdiv+1,w
  1759     077B  1283               	bcf	3,5	;RP0=0, select bank0
  1760     077C  1303               	bcf	3,6	;RP1=0, select bank0
  1761     077D  00A9               	movwf	vfpfcnvrt@convarg+1
  1762     077E  0870               	movf	?___awdiv,w
  1763     077F  00A8               	movwf	vfpfcnvrt@convarg
  1764     0780                     l1164:
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1767     0780  0828               	movf	vfpfcnvrt@convarg,w
  1768     0781  0429               	iorwf	vfpfcnvrt@convarg+1,w
  1769     0782  1903               	btfsc	3,2
  1770     0783  2F85               	goto	u761
  1771     0784  2F86               	goto	u760
  1772     0785                     u761:
  1773     0785  2F8B               	goto	l1168
  1774     0786                     u760:
  1775     0786                     l1166:
  1776     0786  082C               	movf	vfpfcnvrt@c,w
  1777     0787  1D03               	btfss	3,2
  1778     0788  2F8A               	goto	u771
  1779     0789  2F8B               	goto	u770
  1780     078A                     u771:
  1781     078A  2F4C               	goto	l1160
  1782     078B                     u770:
  1783     078B                     l1168:
  1784                           
  1785                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1786     078B  082C               	movf	vfpfcnvrt@c,w
  1787     078C  1903               	btfsc	3,2
  1788     078D  2F8F               	goto	u781
  1789     078E  2F90               	goto	u780
  1790     078F                     u781:
  1791     078F  2FB6               	goto	l1178
  1792     0790                     u780:
  1793     0790                     l1170:
  1794     0790  0826               	movf	vfpfcnvrt@done,w
  1795     0791  1903               	btfsc	3,2
  1796     0792  2F94               	goto	u791
  1797     0793  2F95               	goto	u790
  1798     0794                     u791:
  1799     0794  2FB6               	goto	l1178
  1800     0795                     u790:
  1801     0795                     l1172:
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1804     0795  3001               	movlw	1
  1805     0796  02AC               	subwf	vfpfcnvrt@c,f
  1806     0797  082C               	movf	vfpfcnvrt@c,w
  1807     0798  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1808     0799  0084               	movwf	4
  1809     079A  302D               	movlw	45
  1810     079B  1383               	bcf	3,7	;select IRP bank1
  1811     079C  0080               	movwf	0
  1812     079D  2FB6               	goto	l1178
  1813     079E                     l1174:
  1814                           
  1815                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1816     079E  082C               	movf	vfpfcnvrt@c,w
  1817     079F  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1818     07A0  0084               	movwf	4
  1819     07A1  1383               	bcf	3,7	;select IRP bank1
  1820     07A2  0800               	movf	0,w
  1821     07A3  00A4               	movwf	??_vfpfcnvrt
  1822     07A4  01A5               	clrf	??_vfpfcnvrt+1
  1823     07A5  0824               	movf	??_vfpfcnvrt,w
  1824     07A6  00F0               	movwf	fputc@c
  1825     07A7  0825               	movf	??_vfpfcnvrt+1,w
  1826     07A8  00F1               	movwf	fputc@c+1
  1827     07A9  0820               	movf	vfpfcnvrt@fp,w
  1828     07AA  00F2               	movwf	fputc@fp
  1829     07AB  0821               	movf	vfpfcnvrt@fp+1,w
  1830     07AC  00F3               	movwf	fputc@fp+1
  1831     07AD  120A  118A  265E  120A  118A  	fcall	_fputc
  1832     07B2                     l1176:
  1833     07B2  3001               	movlw	1
  1834     07B3  1283               	bcf	3,5	;RP0=0, select bank0
  1835     07B4  1303               	bcf	3,6	;RP1=0, select bank0
  1836     07B5  07AC               	addwf	vfpfcnvrt@c,f
  1837     07B6                     l1178:
  1838                           
  1839                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1840     07B6  3020               	movlw	32
  1841     07B7  062C               	xorwf	vfpfcnvrt@c,w
  1842     07B8  1D03               	btfss	3,2
  1843     07B9  2FBB               	goto	u801
  1844     07BA  2FBC               	goto	u800
  1845     07BB                     u801:
  1846     07BB  2F9E               	goto	l1174
  1847     07BC                     u800:
  1848     07BC  2FDD               	goto	l694
  1849     07BD                     l1180:
  1850                           
  1851                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1852     07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1853     07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1854     07BF  0822               	movf	vfpfcnvrt@fmt,w
  1855     07C0  0084               	movwf	4
  1856     07C1  3001               	movlw	1
  1857     07C2  0780               	addwf	0,f
  1858     07C3  2FDD               	goto	l694
  1859     07C4                     l1184:
  1860                           
  1861                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1862     07C4  0822               	movf	vfpfcnvrt@fmt,w
  1863     07C5  0084               	movwf	4
  1864     07C6  0800               	movf	0,w
  1865     07C7  0084               	movwf	4
  1866     07C8  120A  118A  200D  120A  118A  	fcall	stringdir
  1867     07CD  00A4               	movwf	??_vfpfcnvrt
  1868     07CE  01A5               	clrf	??_vfpfcnvrt+1
  1869     07CF  0824               	movf	??_vfpfcnvrt,w
  1870     07D0  00F0               	movwf	fputc@c
  1871     07D1  0825               	movf	??_vfpfcnvrt+1,w
  1872     07D2  00F1               	movwf	fputc@c+1
  1873     07D3  0820               	movf	vfpfcnvrt@fp,w
  1874     07D4  00F2               	movwf	fputc@fp
  1875     07D5  0821               	movf	vfpfcnvrt@fp+1,w
  1876     07D6  00F3               	movwf	fputc@fp+1
  1877     07D7  120A  118A  265E  120A  118A  	fcall	_fputc
  1878     07DC  2FBD               	goto	l1180
  1879     07DD                     l694:
  1880     07DD  0008               	return
  1881     07DE                     __end_of_vfpfcnvrt:
  1882                           
  1883                           	psect	text9
  1884     065E                     __ptext9:	
  1885 ;; *************** function _fputc *****************
  1886 ;; Defined at:
  1887 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  c               2    0[COMMON] int 
  1890 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  1891 ;;		 -> sprintf@f(11), 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2    0[COMMON] int 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1903 ;;      Params:         4       0       0       0       0
  1904 ;;      Locals:         0       0       0       0       0
  1905 ;;      Temps:          9       0       0       0       0
  1906 ;;      Totals:        13       0       0       0       0
  1907 ;;Total ram usage:       13 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 1
  1910 ;; This function calls:
  1911 ;;		_putch
  1912 ;; This function is called by:
  1913 ;;		_vfpfcnvrt
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917     065E                     _fputc:	
  1918                           ;psect for function _fputc
  1919                           
  1920     065E                     l1116:	
  1921                           ;incstack = 0
  1922                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1923                           
  1924     065E  0872               	movf	fputc@fp,w
  1925     065F  0473               	iorwf	fputc@fp+1,w
  1926     0660  1903               	btfsc	3,2
  1927     0661  2E63               	goto	u651
  1928     0662  2E64               	goto	u650
  1929     0663                     u651:
  1930     0663  2E6A               	goto	l1120
  1931     0664                     u650:
  1932     0664                     l1118:
  1933     0664  0872               	movf	fputc@fp,w
  1934     0665  0473               	iorwf	fputc@fp+1,w
  1935     0666  1D03               	btfss	3,2
  1936     0667  2E69               	goto	u661
  1937     0668  2E6A               	goto	u660
  1938     0669                     u661:
  1939     0669  2E71               	goto	l1122
  1940     066A                     u660:
  1941     066A                     l1120:
  1942     066A  0870               	movf	fputc@c,w
  1943     066B  120A  118A  236A  120A  118A  	fcall	_putch
  1944     0670  2EF7               	goto	l719
  1945     0671                     l1122:
  1946     0671  0872               	movf	fputc@fp,w
  1947     0672  3E09               	addlw	9
  1948     0673  00F4               	movwf	??_fputc
  1949     0674  0873               	movf	fputc@fp+1,w
  1950     0675  1803               	skipnc
  1951     0676  3E01               	addlw	1
  1952     0677  3E00               	addlw	0
  1953     0678  00F5               	movwf	??_fputc+1
  1954     0679  0874               	movf	??_fputc,w
  1955     067A  0084               	movwf	4
  1956     067B  1783               	bsf	3,7
  1957     067C  1C75               	btfss	??_fputc+1,0
  1958     067D  1383               	bcf	3,7
  1959     067E  0800               	movf	0,w
  1960     067F  00F6               	movwf	??_fputc+2
  1961     0680  0A84               	incf	4,f
  1962     0681  0800               	movf	0,w
  1963     0682  00F7               	movwf	??_fputc+3
  1964     0683  0876               	movf	??_fputc+2,w
  1965     0684  0477               	iorwf	??_fputc+3,w
  1966     0685  1903               	btfsc	3,2
  1967     0686  2E88               	goto	u671
  1968     0687  2E89               	goto	u670
  1969     0688                     u671:
  1970     0688  2EBB               	goto	l1126
  1971     0689                     u670:
  1972     0689                     l1124:
  1973     0689  0872               	movf	fputc@fp,w
  1974     068A  3E09               	addlw	9
  1975     068B  00F4               	movwf	??_fputc
  1976     068C  0873               	movf	fputc@fp+1,w
  1977     068D  1803               	skipnc
  1978     068E  3E01               	addlw	1
  1979     068F  3E00               	addlw	0
  1980     0690  00F5               	movwf	??_fputc+1
  1981     0691  0874               	movf	??_fputc,w
  1982     0692  0084               	movwf	4
  1983     0693  1783               	bsf	3,7
  1984     0694  1C75               	btfss	??_fputc+1,0
  1985     0695  1383               	bcf	3,7
  1986     0696  0800               	movf	0,w
  1987     0697  00F6               	movwf	??_fputc+2
  1988     0698  0A84               	incf	4,f
  1989     0699  0800               	movf	0,w
  1990     069A  00F7               	movwf	??_fputc+3
  1991     069B  0872               	movf	fputc@fp,w
  1992     069C  3E02               	addlw	2
  1993     069D  00F8               	movwf	??_fputc+4
  1994     069E  0873               	movf	fputc@fp+1,w
  1995     069F  1803               	skipnc
  1996     06A0  3E01               	addlw	1
  1997     06A1  3E00               	addlw	0
  1998     06A2  00F9               	movwf	??_fputc+5
  1999     06A3  0878               	movf	??_fputc+4,w
  2000     06A4  0084               	movwf	4
  2001     06A5  1783               	bsf	3,7
  2002     06A6  1C79               	btfss	??_fputc+5,0
  2003     06A7  1383               	bcf	3,7
  2004     06A8  0800               	movf	0,w
  2005     06A9  00FA               	movwf	??_fputc+6
  2006     06AA  0A84               	incf	4,f
  2007     06AB  0800               	movf	0,w
  2008     06AC  00FB               	movwf	??_fputc+7
  2009     06AD  087B               	movf	??_fputc+7,w
  2010     06AE  3A80               	xorlw	128
  2011     06AF  00FC               	movwf	??_fputc+8
  2012     06B0  0877               	movf	??_fputc+3,w
  2013     06B1  3A80               	xorlw	128
  2014     06B2  027C               	subwf	??_fputc+8,w
  2015     06B3  1D03               	skipz
  2016     06B4  2EB7               	goto	u685
  2017     06B5  0876               	movf	??_fputc+2,w
  2018     06B6  027A               	subwf	??_fputc+6,w
  2019     06B7                     u685:
  2020     06B7  1803               	skipnc
  2021     06B8  2EBA               	goto	u681
  2022     06B9  2EBB               	goto	u680
  2023     06BA                     u681:
  2024     06BA  2EF7               	goto	l719
  2025     06BB                     u680:
  2026     06BB                     l1126:
  2027     06BB  0872               	movf	fputc@fp,w
  2028     06BC  0084               	movwf	4
  2029     06BD  1783               	bsf	3,7
  2030     06BE  1C73               	btfss	fputc@fp+1,0
  2031     06BF  1383               	bcf	3,7
  2032     06C0  0800               	movf	0,w
  2033     06C1  00F4               	movwf	??_fputc
  2034     06C2  0A84               	incf	4,f
  2035     06C3  0800               	movf	0,w
  2036     06C4  00F5               	movwf	??_fputc+1
  2037     06C5  0872               	movf	fputc@fp,w
  2038     06C6  3E02               	addlw	2
  2039     06C7  00F6               	movwf	??_fputc+2
  2040     06C8  0873               	movf	fputc@fp+1,w
  2041     06C9  1803               	skipnc
  2042     06CA  3E01               	addlw	1
  2043     06CB  3E00               	addlw	0
  2044     06CC  00F7               	movwf	??_fputc+3
  2045     06CD  0876               	movf	??_fputc+2,w
  2046     06CE  0084               	movwf	4
  2047     06CF  1783               	bsf	3,7
  2048     06D0  1C77               	btfss	??_fputc+3,0
  2049     06D1  1383               	bcf	3,7
  2050     06D2  0800               	movf	0,w
  2051     06D3  0774               	addwf	??_fputc,w
  2052     06D4  00F9               	movwf	??_fputc+5
  2053     06D5  0875               	movf	??_fputc+1,w
  2054     06D6  00F8               	movwf	??_fputc+4
  2055     06D7  1803               	skipnc
  2056     06D8  0AF8               	incf	??_fputc+4,f
  2057     06D9  1F80               	btfss	0,7
  2058     06DA  2EDC               	goto	u690
  2059     06DB  03F8               	decf	??_fputc+4,f
  2060     06DC                     u690:
  2061     06DC  0878               	movf	??_fputc+4,w
  2062     06DD  00FA               	movwf	??_fputc+6
  2063     06DE  0879               	movf	??_fputc+5,w
  2064     06DF  0084               	movwf	4
  2065     06E0  1783               	bsf	3,7
  2066     06E1  1C7A               	btfss	??_fputc+6,0
  2067     06E2  1383               	bcf	3,7
  2068     06E3  0870               	movf	fputc@c,w
  2069     06E4  0080               	movwf	0
  2070     06E5  0872               	movf	fputc@fp,w
  2071     06E6  3E02               	addlw	2
  2072     06E7  00F4               	movwf	??_fputc
  2073     06E8  0873               	movf	fputc@fp+1,w
  2074     06E9  1803               	skipnc
  2075     06EA  3E01               	addlw	1
  2076     06EB  3E00               	addlw	0
  2077     06EC  00F5               	movwf	??_fputc+1
  2078     06ED  0874               	movf	??_fputc,w
  2079     06EE  0084               	movwf	4
  2080     06EF  1783               	bsf	3,7
  2081     06F0  1C75               	btfss	??_fputc+1,0
  2082     06F1  1383               	bcf	3,7
  2083     06F2  3001               	movlw	1
  2084     06F3  0780               	addwf	0,f
  2085     06F4  0A84               	incf	4,f
  2086     06F5  1803               	skipnc
  2087     06F6  0A80               	incf	0,f
  2088     06F7                     l719:
  2089     06F7  0008               	return
  2090     06F8                     __end_of_fputc:
  2091                           
  2092                           	psect	text10
  2093     036A                     __ptext10:	
  2094 ;; *************** function _putch *****************
  2095 ;; Defined at:
  2096 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  c               1    wreg     unsigned char 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  c               1    0[COMMON] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0
  2113 ;;      Totals:         0       0       0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_fputc
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123     036A                     _putch:	
  2124                           ;psect for function _putch
  2125                           
  2126     036A                     l730:	
  2127                           ;incstack = 0
  2128                           ; Regs used in _putch: [wreg]
  2129                           
  2130     036A  0008               	return
  2131     036B                     __end_of_putch:
  2132                           
  2133                           	psect	text11
  2134     039C                     __ptext11:	
  2135 ;; *************** function _abs *****************
  2136 ;; Defined at:
  2137 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  a               2    6[COMMON] int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  2    6[COMMON] int 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         2       0       0       0       0
  2152 ;;      Locals:         0       0       0       0       0
  2153 ;;      Temps:          2       0       0       0       0
  2154 ;;      Totals:         4       0       0       0       0
  2155 ;;Total ram usage:        4 bytes
  2156 ;; Hardware stack levels used: 1
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_vfpfcnvrt
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164     039C                     _abs:	
  2165                           ;psect for function _abs
  2166                           
  2167     039C                     l1130:	
  2168                           ;incstack = 0
  2169                           ; Regs used in _abs: [wreg+status,2+status,0]
  2170                           
  2171     039C  1BF7               	btfsc	abs@a+1,7
  2172     039D  2B9F               	goto	u701
  2173     039E  2BA0               	goto	u700
  2174     039F                     u701:
  2175     039F  2BA1               	goto	l1134
  2176     03A0                     u700:
  2177     03A0                     l1132:
  2178     03A0  2BAC               	goto	l707
  2179     03A1                     l1134:
  2180     03A1  0976               	comf	abs@a,w
  2181     03A2  00F8               	movwf	??_abs
  2182     03A3  0977               	comf	abs@a+1,w
  2183     03A4  00F9               	movwf	??_abs+1
  2184     03A5  0AF8               	incf	??_abs,f
  2185     03A6  1903               	skipnz
  2186     03A7  0AF9               	incf	??_abs+1,f
  2187     03A8  0878               	movf	??_abs,w
  2188     03A9  00F6               	movwf	?_abs
  2189     03AA  0879               	movf	??_abs+1,w
  2190     03AB  00F7               	movwf	?_abs+1
  2191     03AC                     l707:
  2192     03AC  0008               	return
  2193     03AD                     __end_of_abs:
  2194                           
  2195                           	psect	text12
  2196     0536                     __ptext12:	
  2197 ;; *************** function ___awmod *****************
  2198 ;; Defined at:
  2199 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  divisor         2    0[COMMON] int 
  2202 ;;  dividend        2    2[COMMON] int 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  sign            1    5[COMMON] unsigned char 
  2205 ;;  counter         1    4[COMMON] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  2    0[COMMON] int 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2215 ;;      Params:         4       0       0       0       0
  2216 ;;      Locals:         2       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0
  2218 ;;      Totals:         6       0       0       0       0
  2219 ;;Total ram usage:        6 bytes
  2220 ;; Hardware stack levels used: 1
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_vfpfcnvrt
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228     0536                     ___awmod:	
  2229                           ;psect for function ___awmod
  2230                           
  2231     0536                     l1078:	
  2232                           ;incstack = 0
  2233                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2234                           
  2235     0536  01F5               	clrf	___awmod@sign
  2236     0537                     l1080:
  2237     0537  1FF3               	btfss	___awmod@dividend+1,7
  2238     0538  2D3A               	goto	u561
  2239     0539  2D3B               	goto	u560
  2240     053A                     u561:
  2241     053A  2D42               	goto	l1086
  2242     053B                     u560:
  2243     053B                     l1082:
  2244     053B  09F2               	comf	___awmod@dividend,f
  2245     053C  09F3               	comf	___awmod@dividend+1,f
  2246     053D  0AF2               	incf	___awmod@dividend,f
  2247     053E  1903               	skipnz
  2248     053F  0AF3               	incf	___awmod@dividend+1,f
  2249     0540                     l1084:
  2250     0540  3001               	movlw	1
  2251     0541  00F5               	movwf	___awmod@sign
  2252     0542                     l1086:
  2253     0542  1FF1               	btfss	___awmod@divisor+1,7
  2254     0543  2D45               	goto	u571
  2255     0544  2D46               	goto	u570
  2256     0545                     u571:
  2257     0545  2D4B               	goto	l1090
  2258     0546                     u570:
  2259     0546                     l1088:
  2260     0546  09F0               	comf	___awmod@divisor,f
  2261     0547  09F1               	comf	___awmod@divisor+1,f
  2262     0548  0AF0               	incf	___awmod@divisor,f
  2263     0549  1903               	skipnz
  2264     054A  0AF1               	incf	___awmod@divisor+1,f
  2265     054B                     l1090:
  2266     054B  0870               	movf	___awmod@divisor,w
  2267     054C  0471               	iorwf	___awmod@divisor+1,w
  2268     054D  1903               	btfsc	3,2
  2269     054E  2D50               	goto	u581
  2270     054F  2D51               	goto	u580
  2271     0550                     u581:
  2272     0550  2D7E               	goto	l1108
  2273     0551                     u580:
  2274     0551                     l1092:
  2275     0551  3001               	movlw	1
  2276     0552  00F4               	movwf	___awmod@counter
  2277     0553  2D5D               	goto	l1098
  2278     0554                     l1094:
  2279     0554  3001               	movlw	1
  2280     0555                     u595:
  2281     0555  1003               	clrc
  2282     0556  0DF0               	rlf	___awmod@divisor,f
  2283     0557  0DF1               	rlf	___awmod@divisor+1,f
  2284     0558  3EFF               	addlw	-1
  2285     0559  1D03               	skipz
  2286     055A  2D55               	goto	u595
  2287     055B                     l1096:
  2288     055B  3001               	movlw	1
  2289     055C  07F4               	addwf	___awmod@counter,f
  2290     055D                     l1098:
  2291     055D  1FF1               	btfss	___awmod@divisor+1,7
  2292     055E  2D60               	goto	u601
  2293     055F  2D61               	goto	u600
  2294     0560                     u601:
  2295     0560  2D54               	goto	l1094
  2296     0561                     u600:
  2297     0561                     l1100:
  2298     0561  0871               	movf	___awmod@divisor+1,w
  2299     0562  0273               	subwf	___awmod@dividend+1,w
  2300     0563  1D03               	skipz
  2301     0564  2D67               	goto	u615
  2302     0565  0870               	movf	___awmod@divisor,w
  2303     0566  0272               	subwf	___awmod@dividend,w
  2304     0567                     u615:
  2305     0567  1C03               	skipc
  2306     0568  2D6A               	goto	u611
  2307     0569  2D6B               	goto	u610
  2308     056A                     u611:
  2309     056A  2D71               	goto	l1104
  2310     056B                     u610:
  2311     056B                     l1102:
  2312     056B  0870               	movf	___awmod@divisor,w
  2313     056C  02F2               	subwf	___awmod@dividend,f
  2314     056D  0871               	movf	___awmod@divisor+1,w
  2315     056E  1C03               	skipc
  2316     056F  03F3               	decf	___awmod@dividend+1,f
  2317     0570  02F3               	subwf	___awmod@dividend+1,f
  2318     0571                     l1104:
  2319     0571  3001               	movlw	1
  2320     0572                     u625:
  2321     0572  1003               	clrc
  2322     0573  0CF1               	rrf	___awmod@divisor+1,f
  2323     0574  0CF0               	rrf	___awmod@divisor,f
  2324     0575  3EFF               	addlw	-1
  2325     0576  1D03               	skipz
  2326     0577  2D72               	goto	u625
  2327     0578                     l1106:
  2328     0578  3001               	movlw	1
  2329     0579  02F4               	subwf	___awmod@counter,f
  2330     057A  1D03               	btfss	3,2
  2331     057B  2D7D               	goto	u631
  2332     057C  2D7E               	goto	u630
  2333     057D                     u631:
  2334     057D  2D61               	goto	l1100
  2335     057E                     u630:
  2336     057E                     l1108:
  2337     057E  0875               	movf	___awmod@sign,w
  2338     057F  1903               	btfsc	3,2
  2339     0580  2D82               	goto	u641
  2340     0581  2D83               	goto	u640
  2341     0582                     u641:
  2342     0582  2D88               	goto	l1112
  2343     0583                     u640:
  2344     0583                     l1110:
  2345     0583  09F2               	comf	___awmod@dividend,f
  2346     0584  09F3               	comf	___awmod@dividend+1,f
  2347     0585  0AF2               	incf	___awmod@dividend,f
  2348     0586  1903               	skipnz
  2349     0587  0AF3               	incf	___awmod@dividend+1,f
  2350     0588                     l1112:
  2351     0588  0873               	movf	___awmod@dividend+1,w
  2352     0589  00F1               	movwf	?___awmod+1
  2353     058A  0872               	movf	___awmod@dividend,w
  2354     058B  00F0               	movwf	?___awmod
  2355     058C                     l359:
  2356     058C  0008               	return
  2357     058D                     __end_of___awmod:
  2358                           
  2359                           	psect	text13
  2360     058D                     __ptext13:	
  2361 ;; *************** function ___awdiv *****************
  2362 ;; Defined at:
  2363 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  divisor         2    0[COMMON] int 
  2366 ;;  dividend        2    2[COMMON] int 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  quotient        2    6[COMMON] int 
  2369 ;;  sign            1    5[COMMON] unsigned char 
  2370 ;;  counter         1    4[COMMON] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  2    0[COMMON] int 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2380 ;;      Params:         4       0       0       0       0
  2381 ;;      Locals:         4       0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0
  2383 ;;      Totals:         8       0       0       0       0
  2384 ;;Total ram usage:        8 bytes
  2385 ;; Hardware stack levels used: 1
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_vfpfcnvrt
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393     058D                     ___awdiv:	
  2394                           ;psect for function ___awdiv
  2395                           
  2396     058D                     l1034:	
  2397                           ;incstack = 0
  2398                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2399                           
  2400     058D  01F5               	clrf	___awdiv@sign
  2401     058E                     l1036:
  2402     058E  1FF1               	btfss	___awdiv@divisor+1,7
  2403     058F  2D91               	goto	u461
  2404     0590  2D92               	goto	u460
  2405     0591                     u461:
  2406     0591  2D99               	goto	l1042
  2407     0592                     u460:
  2408     0592                     l1038:
  2409     0592  09F0               	comf	___awdiv@divisor,f
  2410     0593  09F1               	comf	___awdiv@divisor+1,f
  2411     0594  0AF0               	incf	___awdiv@divisor,f
  2412     0595  1903               	skipnz
  2413     0596  0AF1               	incf	___awdiv@divisor+1,f
  2414     0597                     l1040:
  2415     0597  3001               	movlw	1
  2416     0598  00F5               	movwf	___awdiv@sign
  2417     0599                     l1042:
  2418     0599  1FF3               	btfss	___awdiv@dividend+1,7
  2419     059A  2D9C               	goto	u471
  2420     059B  2D9D               	goto	u470
  2421     059C                     u471:
  2422     059C  2DA4               	goto	l1048
  2423     059D                     u470:
  2424     059D                     l1044:
  2425     059D  09F2               	comf	___awdiv@dividend,f
  2426     059E  09F3               	comf	___awdiv@dividend+1,f
  2427     059F  0AF2               	incf	___awdiv@dividend,f
  2428     05A0  1903               	skipnz
  2429     05A1  0AF3               	incf	___awdiv@dividend+1,f
  2430     05A2                     l1046:
  2431     05A2  3001               	movlw	1
  2432     05A3  06F5               	xorwf	___awdiv@sign,f
  2433     05A4                     l1048:
  2434     05A4  01F6               	clrf	___awdiv@quotient
  2435     05A5  01F7               	clrf	___awdiv@quotient+1
  2436     05A6                     l1050:
  2437     05A6  0870               	movf	___awdiv@divisor,w
  2438     05A7  0471               	iorwf	___awdiv@divisor+1,w
  2439     05A8  1903               	btfsc	3,2
  2440     05A9  2DAB               	goto	u481
  2441     05AA  2DAC               	goto	u480
  2442     05AB                     u481:
  2443     05AB  2DE1               	goto	l1070
  2444     05AC                     u480:
  2445     05AC                     l1052:
  2446     05AC  3001               	movlw	1
  2447     05AD  00F4               	movwf	___awdiv@counter
  2448     05AE  2DB8               	goto	l1058
  2449     05AF                     l1054:
  2450     05AF  3001               	movlw	1
  2451     05B0                     u495:
  2452     05B0  1003               	clrc
  2453     05B1  0DF0               	rlf	___awdiv@divisor,f
  2454     05B2  0DF1               	rlf	___awdiv@divisor+1,f
  2455     05B3  3EFF               	addlw	-1
  2456     05B4  1D03               	skipz
  2457     05B5  2DB0               	goto	u495
  2458     05B6                     l1056:
  2459     05B6  3001               	movlw	1
  2460     05B7  07F4               	addwf	___awdiv@counter,f
  2461     05B8                     l1058:
  2462     05B8  1FF1               	btfss	___awdiv@divisor+1,7
  2463     05B9  2DBB               	goto	u501
  2464     05BA  2DBC               	goto	u500
  2465     05BB                     u501:
  2466     05BB  2DAF               	goto	l1054
  2467     05BC                     u500:
  2468     05BC                     l1060:
  2469     05BC  3001               	movlw	1
  2470     05BD                     u515:
  2471     05BD  1003               	clrc
  2472     05BE  0DF6               	rlf	___awdiv@quotient,f
  2473     05BF  0DF7               	rlf	___awdiv@quotient+1,f
  2474     05C0  3EFF               	addlw	-1
  2475     05C1  1D03               	skipz
  2476     05C2  2DBD               	goto	u515
  2477     05C3  0871               	movf	___awdiv@divisor+1,w
  2478     05C4  0273               	subwf	___awdiv@dividend+1,w
  2479     05C5  1D03               	skipz
  2480     05C6  2DC9               	goto	u525
  2481     05C7  0870               	movf	___awdiv@divisor,w
  2482     05C8  0272               	subwf	___awdiv@dividend,w
  2483     05C9                     u525:
  2484     05C9  1C03               	skipc
  2485     05CA  2DCC               	goto	u521
  2486     05CB  2DCD               	goto	u520
  2487     05CC                     u521:
  2488     05CC  2DD4               	goto	l1066
  2489     05CD                     u520:
  2490     05CD                     l1062:
  2491     05CD  0870               	movf	___awdiv@divisor,w
  2492     05CE  02F2               	subwf	___awdiv@dividend,f
  2493     05CF  0871               	movf	___awdiv@divisor+1,w
  2494     05D0  1C03               	skipc
  2495     05D1  03F3               	decf	___awdiv@dividend+1,f
  2496     05D2  02F3               	subwf	___awdiv@dividend+1,f
  2497     05D3                     l1064:
  2498     05D3  1476               	bsf	___awdiv@quotient,0
  2499     05D4                     l1066:
  2500     05D4  3001               	movlw	1
  2501     05D5                     u535:
  2502     05D5  1003               	clrc
  2503     05D6  0CF1               	rrf	___awdiv@divisor+1,f
  2504     05D7  0CF0               	rrf	___awdiv@divisor,f
  2505     05D8  3EFF               	addlw	-1
  2506     05D9  1D03               	skipz
  2507     05DA  2DD5               	goto	u535
  2508     05DB                     l1068:
  2509     05DB  3001               	movlw	1
  2510     05DC  02F4               	subwf	___awdiv@counter,f
  2511     05DD  1D03               	btfss	3,2
  2512     05DE  2DE0               	goto	u541
  2513     05DF  2DE1               	goto	u540
  2514     05E0                     u541:
  2515     05E0  2DBC               	goto	l1060
  2516     05E1                     u540:
  2517     05E1                     l1070:
  2518     05E1  0875               	movf	___awdiv@sign,w
  2519     05E2  1903               	btfsc	3,2
  2520     05E3  2DE5               	goto	u551
  2521     05E4  2DE6               	goto	u550
  2522     05E5                     u551:
  2523     05E5  2DEB               	goto	l1074
  2524     05E6                     u550:
  2525     05E6                     l1072:
  2526     05E6  09F6               	comf	___awdiv@quotient,f
  2527     05E7  09F7               	comf	___awdiv@quotient+1,f
  2528     05E8  0AF6               	incf	___awdiv@quotient,f
  2529     05E9  1903               	skipnz
  2530     05EA  0AF7               	incf	___awdiv@quotient+1,f
  2531     05EB                     l1074:
  2532     05EB  0877               	movf	___awdiv@quotient+1,w
  2533     05EC  00F1               	movwf	?___awdiv+1
  2534     05ED  0876               	movf	___awdiv@quotient,w
  2535     05EE  00F0               	movwf	?___awdiv
  2536     05EF                     l346:
  2537     05EF  0008               	return
  2538     05F0                     __end_of___awdiv:
  2539                           
  2540                           	psect	text14
  2541     03AD                     __ptext14:	
  2542 ;; *************** function _lcd_initialise *****************
  2543 ;; Defined at:
  2544 ;;		line 11 in file "LCD.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0, pclath, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2558 ;;      Params:         0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used: 1
  2564 ;; Hardware stack levels required when called: 1
  2565 ;; This function calls:
  2566 ;;		_lcd_command
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572     03AD                     _lcd_initialise:	
  2573                           ;psect for function _lcd_initialise
  2574                           
  2575     03AD                     l1272:	
  2576                           ;incstack = 0
  2577                           ; Regs used in _lcd_initialise: [wreg+status,2+status,0+pclath+cstack]
  2578                           
  2579                           
  2580                           ;LCD.c: 13:     lcd_command(0x28);
  2581     03AD  3028               	movlw	40
  2582     03AE  120A  118A  2497  120A  118A  	fcall	_lcd_command
  2583                           
  2584                           ;LCD.c: 15:     lcd_command(0x0C);
  2585     03B3  300C               	movlw	12
  2586     03B4  120A  118A  2497  120A  118A  	fcall	_lcd_command
  2587                           
  2588                           ;LCD.c: 17:     lcd_command(0x01);
  2589     03B9  3001               	movlw	1
  2590     03BA  120A  118A  2497  120A  118A  	fcall	_lcd_command
  2591     03BF                     l41:
  2592     03BF  0008               	return
  2593     03C0                     __end_of_lcd_initialise:
  2594                           
  2595                           	psect	text15
  2596     0497                     __ptext15:	
  2597 ;; *************** function _lcd_command *****************
  2598 ;; Defined at:
  2599 ;;		line 54 in file "LCD.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  cmnd            1    wreg     unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  cmnd            1    2[COMMON] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2613 ;;      Params:         0       0       0       0       0
  2614 ;;      Locals:         1       0       0       0       0
  2615 ;;      Temps:          2       0       0       0       0
  2616 ;;      Totals:         3       0       0       0       0
  2617 ;;Total ram usage:        3 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_lcd_initialise
  2623 ;;		_lcd_set_cursor
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627     0497                     _lcd_command:	
  2628                           ;psect for function _lcd_command
  2629                           
  2630                           
  2631                           ;incstack = 0
  2632                           ; Regs used in _lcd_command: [wreg+status,2+status,0]
  2633                           ;lcd_command@cmnd stored from wreg
  2634     0497  00F2               	movwf	lcd_command@cmnd
  2635     0498                     l1246:
  2636                           
  2637                           ;LCD.c: 54: void lcd_command(unsigned char cmnd);LCD.c: 55: {;LCD.c: 56:     PORTB=cmnd&
      +                          0xf0;
  2638     0498  0872               	movf	lcd_command@cmnd,w
  2639     0499  39F0               	andlw	240
  2640     049A  1283               	bcf	3,5	;RP0=0, select bank0
  2641     049B  1303               	bcf	3,6	;RP1=0, select bank0
  2642     049C  0086               	movwf	6	;volatile
  2643     049D                     l1248:
  2644                           
  2645                           ;LCD.c: 57:     PORTBbits.RB0=0;
  2646     049D  1006               	bcf	6,0	;volatile
  2647     049E                     l1250:
  2648                           
  2649                           ;LCD.c: 58:     PORTBbits.RB1=0;
  2650     049E  1086               	bcf	6,1	;volatile
  2651     049F                     l1252:
  2652                           
  2653                           ;LCD.c: 59:     PORTBbits.RB2=1;
  2654     049F  1506               	bsf	6,2	;volatile
  2655     04A0                     l1254:
  2656                           
  2657                           ;LCD.c: 60:     _delay((unsigned long)((2)*(20000000/4000.0)));
  2658     04A0  300D               	movlw	13
  2659     04A1  00F1               	movwf	??_lcd_command+1
  2660     04A2  30FB               	movlw	251
  2661     04A3  00F0               	movwf	??_lcd_command
  2662     04A4                     u937:
  2663     04A4  0BF0               	decfsz	??_lcd_command,f
  2664     04A5  2CA4               	goto	u937
  2665     04A6  0BF1               	decfsz	??_lcd_command+1,f
  2666     04A7  2CA4               	goto	u937
  2667     04A8  2CA9               	nop2
  2668     04A9                     l1256:
  2669                           
  2670                           ;LCD.c: 61:     PORTBbits.RB2=0;
  2671     04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2672     04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2673     04AB  1106               	bcf	6,2	;volatile
  2674     04AC                     l1258:
  2675                           
  2676                           ;LCD.c: 62:     PORTB=((cmnd<<4)&0xf0);
  2677     04AC  0872               	movf	lcd_command@cmnd,w
  2678     04AD  00F0               	movwf	??_lcd_command
  2679     04AE  3003               	movlw	3
  2680     04AF                     u845:
  2681     04AF  1003               	clrc
  2682     04B0  0DF0               	rlf	??_lcd_command,f
  2683     04B1  3EFF               	addlw	-1
  2684     04B2  1D03               	skipz
  2685     04B3  2CAF               	goto	u845
  2686     04B4  1003               	clrc
  2687     04B5  0D70               	rlf	??_lcd_command,w
  2688     04B6  39F0               	andlw	240
  2689     04B7  0086               	movwf	6	;volatile
  2690     04B8                     l1260:
  2691                           
  2692                           ;LCD.c: 63:     PORTBbits.RB0=0;
  2693     04B8  1006               	bcf	6,0	;volatile
  2694     04B9                     l1262:
  2695                           
  2696                           ;LCD.c: 64:     PORTBbits.RB1=0;
  2697     04B9  1086               	bcf	6,1	;volatile
  2698     04BA                     l1264:
  2699                           
  2700                           ;LCD.c: 65:     PORTBbits.RB2=1;
  2701     04BA  1506               	bsf	6,2	;volatile
  2702     04BB                     l1266:
  2703                           
  2704                           ;LCD.c: 66:     _delay((unsigned long)((2)*(20000000/4000.0)));
  2705     04BB  300D               	movlw	13
  2706     04BC  00F1               	movwf	??_lcd_command+1
  2707     04BD  30FB               	movlw	251
  2708     04BE  00F0               	movwf	??_lcd_command
  2709     04BF                     u947:
  2710     04BF  0BF0               	decfsz	??_lcd_command,f
  2711     04C0  2CBF               	goto	u947
  2712     04C1  0BF1               	decfsz	??_lcd_command+1,f
  2713     04C2  2CBF               	goto	u947
  2714     04C3  2CC4               	nop2
  2715     04C4                     l1268:
  2716                           
  2717                           ;LCD.c: 67:     PORTBbits.RB2=0;
  2718     04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2719     04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2720     04C6  1106               	bcf	6,2	;volatile
  2721     04C7                     l53:
  2722     04C7  0008               	return
  2723     04C8                     __end_of_lcd_command:
  2724                           
  2725                           	psect	text16
  2726     04F9                     __ptext16:	
  2727 ;; *************** function _ADC_read *****************
  2728 ;; Defined at:
  2729 ;;		line 21 in file "ADC.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  a               2    0[COMMON] int 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  2    0[COMMON] int 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, btemp+1
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         2       0       0       0       0
  2744 ;;      Locals:         0       0       0       0       0
  2745 ;;      Temps:          2       0       0       0       0
  2746 ;;      Totals:         4       0       0       0       0
  2747 ;;Total ram usage:        4 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; This function calls:
  2750 ;;		Nothing
  2751 ;; This function is called by:
  2752 ;;		_main
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756     04F9                     _ADC_read:	
  2757                           ;psect for function _ADC_read
  2758                           
  2759     04F9                     l1276:	
  2760                           ;incstack = 0
  2761                           ; Regs used in _ADC_read: [wreg+status,2+status,0+btemp+1]
  2762                           
  2763                           
  2764                           ;ADC.c: 21: int ADC_read(int a);ADC.c: 22: {;ADC.c: 23:     if(a==0)
  2765     04F9  0870               	movf	ADC_read@a,w
  2766     04FA  0471               	iorwf	ADC_read@a+1,w
  2767     04FB  1D03               	btfss	3,2
  2768     04FC  2CFE               	goto	u851
  2769     04FD  2CFF               	goto	u850
  2770     04FE                     u851:
  2771     04FE  2D05               	goto	l1280
  2772     04FF                     u850:
  2773     04FF                     l1278:
  2774                           
  2775                           ;ADC.c: 24:     {;ADC.c: 25:         ADCON0bits.CHS0=0;
  2776     04FF  1283               	bcf	3,5	;RP0=0, select bank0
  2777     0500  1303               	bcf	3,6	;RP1=0, select bank0
  2778     0501  119F               	bcf	31,3	;volatile
  2779                           
  2780                           ;ADC.c: 26:         ADCON0bits.CHS1=0;
  2781     0502  121F               	bcf	31,4	;volatile
  2782                           
  2783                           ;ADC.c: 27:         ADCON0bits.CHS2=0;
  2784     0503  129F               	bcf	31,5	;volatile
  2785                           
  2786                           ;ADC.c: 28:     }
  2787     0504  2D10               	goto	l102
  2788     0505                     l1280:
  2789     0505  0370               	decf	ADC_read@a,w
  2790     0506  0471               	iorwf	ADC_read@a+1,w
  2791     0507  1D03               	btfss	3,2
  2792     0508  2D0A               	goto	u861
  2793     0509  2D0B               	goto	u860
  2794     050A                     u861:
  2795     050A  2D10               	goto	l102
  2796     050B                     u860:
  2797     050B                     l1282:
  2798                           
  2799                           ;ADC.c: 30:     {;ADC.c: 31:         ADCON0bits.CHS0=1;
  2800     050B  1283               	bcf	3,5	;RP0=0, select bank0
  2801     050C  1303               	bcf	3,6	;RP1=0, select bank0
  2802     050D  159F               	bsf	31,3	;volatile
  2803                           
  2804                           ;ADC.c: 32:         ADCON0bits.CHS1=0;
  2805     050E  121F               	bcf	31,4	;volatile
  2806                           
  2807                           ;ADC.c: 33:         ADCON0bits.CHS2=0;
  2808     050F  129F               	bcf	31,5	;volatile
  2809     0510                     l102:
  2810                           
  2811                           ;ADC.c: 35:         ADCON0bits.GO_DONE = 1;
  2812     0510  1283               	bcf	3,5	;RP0=0, select bank0
  2813     0511  1303               	bcf	3,6	;RP1=0, select bank0
  2814     0512  151F               	bsf	31,2	;volatile
  2815     0513                     l104:	
  2816                           ;ADC.c: 36:         while(PIR1bits.ADIF == 0);
  2817                           
  2818     0513  1F0C               	btfss	12,6	;volatile
  2819     0514  2D16               	goto	u871
  2820     0515  2D17               	goto	u870
  2821     0516                     u871:
  2822     0516  2D13               	goto	l104
  2823     0517                     u870:
  2824     0517                     l1284:
  2825                           
  2826                           ;ADC.c: 38:         ADC_value = ADRESH << 8;
  2827     0517  081E               	movf	30,w	;volatile
  2828     0518  00F2               	movwf	??_ADC_read
  2829     0519  01F3               	clrf	??_ADC_read+1
  2830     051A  0872               	movf	??_ADC_read,w
  2831     051B  00F3               	movwf	??_ADC_read+1
  2832     051C  01F2               	clrf	??_ADC_read
  2833     051D  0872               	movf	??_ADC_read,w
  2834     051E  00EB               	movwf	_ADC_value
  2835     051F  0873               	movf	??_ADC_read+1,w
  2836     0520  00EC               	movwf	_ADC_value+1
  2837     0521                     l1286:
  2838                           
  2839                           ;ADC.c: 39:         ADC_value = ADC_value + ADRESL;
  2840     0521  1683               	bsf	3,5	;RP0=1, select bank1
  2841     0522  1303               	bcf	3,6	;RP1=0, select bank1
  2842     0523  081E               	movf	30,w	;volatile
  2843     0524  1283               	bcf	3,5	;RP0=0, select bank0
  2844     0525  1303               	bcf	3,6	;RP1=0, select bank0
  2845     0526  076B               	addwf	_ADC_value,w
  2846     0527  00F2               	movwf	??_ADC_read
  2847     0528  086C               	movf	_ADC_value+1,w
  2848     0529  1803               	skipnc
  2849     052A  0A6C               	incf	_ADC_value+1,w
  2850     052B  00F3               	movwf	??_ADC_read+1
  2851     052C  0872               	movf	??_ADC_read,w
  2852     052D  00EB               	movwf	_ADC_value
  2853     052E  0873               	movf	??_ADC_read+1,w
  2854     052F  00EC               	movwf	_ADC_value+1
  2855     0530                     l1288:
  2856                           
  2857                           ;ADC.c: 40:         PIR1bits.ADIF = 0;
  2858     0530  130C               	bcf	12,6	;volatile
  2859     0531                     l1290:
  2860                           
  2861                           ;ADC.c: 41:         return ADC_value;
  2862     0531  086C               	movf	_ADC_value+1,w
  2863     0532  00F1               	movwf	?_ADC_read+1
  2864     0533  086B               	movf	_ADC_value,w
  2865     0534  00F0               	movwf	?_ADC_read
  2866     0535                     l107:
  2867     0535  0008               	return
  2868     0536                     __end_of_ADC_read:
  2869                           
  2870                           	psect	text17
  2871     0373                     __ptext17:	
  2872 ;; *************** function _ADC_initialise *****************
  2873 ;; Defined at:
  2874 ;;		line 7 in file "ADC.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;		None
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;		None
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		None
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2888 ;;      Params:         0       0       0       0       0
  2889 ;;      Locals:         0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0
  2891 ;;      Totals:         0       0       0       0       0
  2892 ;;Total ram usage:        0 bytes
  2893 ;; Hardware stack levels used: 1
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_main
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901     0373                     _ADC_initialise:	
  2902                           ;psect for function _ADC_initialise
  2903                           
  2904     0373                     l1274:	
  2905                           ;incstack = 0
  2906                           ; Regs used in _ADC_initialise: []
  2907                           
  2908                           
  2909                           ;ADC.c: 9:     ADCON0 = 0x41;
  2910     0373  3041               	movlw	65
  2911     0374  1283               	bcf	3,5	;RP0=0, select bank0
  2912     0375  1303               	bcf	3,6	;RP1=0, select bank0
  2913     0376  009F               	movwf	31	;volatile
  2914                           
  2915                           ;ADC.c: 10:     ADCON1 = 0x85;
  2916     0377  3085               	movlw	133
  2917     0378  1683               	bsf	3,5	;RP0=1, select bank1
  2918     0379  1303               	bcf	3,6	;RP1=0, select bank1
  2919     037A  009F               	movwf	31	;volatile
  2920     037B                     l98:
  2921     037B  0008               	return
  2922     037C                     __end_of_ADC_initialise:
  2923     0002                     ___latbits      equ	2
  2924     007E                     btemp           set	126	;btemp
  2925     007E                     wtemp0          set	126
  2926                           
  2927                           	psect	config
  2928                           
  2929                           ;Config register CONFIG @ 0x2007
  2930                           ;	Oscillator Selection bits
  2931                           ;	FOSC = HS, HS oscillator
  2932                           ;	Watchdog Timer Enable bit
  2933                           ;	WDTE = OFF, WDT disabled
  2934                           ;	Power-up Timer Enable bit
  2935                           ;	PWRTE = OFF, PWRT disabled
  2936                           ;	Brown-out Reset Enable bit
  2937                           ;	BOREN = OFF, BOR disabled
  2938                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2939                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2940                           ;	Data EEPROM Memory Code Protection bit
  2941                           ;	CPD = OFF, Data EEPROM code protection off
  2942                           ;	Flash Program Memory Write Enable bits
  2943                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2944                           ;	In-Circuit Debugger Mode bit
  2945                           ;	DEBUG = 0x1, unprogrammed default
  2946                           ;	Flash Program Memory Code Protection bit
  2947                           ;	CP = OFF, Code protection off
  2948     2007                     	org	8199
  2949     2007  3F3A               	dw	16186

Data Sizes:
    Strings     14
    Constant    0
    Data        16
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      80
    BANK1            80      0      63
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_int@string(BANK0[16]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_int@string(BANK0[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    integer_string@string	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_int@string(BANK0[16]), 

    lcd_string@str	PTR const unsigned char  size(2) Largest target is 16
		 -> lcd_int@string(BANK0[16]), STR_1(CODE[11]), STR_2(CODE[11]), 

    S674$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> lcd_int@string(BANK0[16]), 

    S674$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_int@string(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _lcd_set_cursor->_lcd_command
    _lcd_string->_lcd_data
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc
    _abs->___awmod
    _lcd_initialise->_lcd_command

Critical Paths under _main in BANK0

    _main->_lcd_int
    _lcd_int->_integer_string
    _integer_string->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2463
                     _ADC_initialise
                           _ADC_read
                     _lcd_initialise
                            _lcd_int
                     _lcd_set_cursor
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       6     2      4     176
                                              3 COMMON     6     2      4
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_int                                             22    20      2    2032
                                             37 BANK0     22    20      2
                     _integer_string
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     1      2     151
                                              3 COMMON     3     1      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      58
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _integer_string                                       3     0      3    1806
                                             34 BANK0      3     0      3
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4    1760
                                             17 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1559
                                             13 COMMON     1     1      0
                                             13 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13     9      4    1434
                                              0 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      67
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_initialise                                       0     0      0      58
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      58
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      46
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_initialise                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_initialise
   _ADC_read
   _lcd_initialise
     _lcd_command
   _lcd_int
     _integer_string
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _lcd_string
       _lcd_data
   _lcd_set_cursor
     _lcd_command
   _lcd_string

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      63     78.8%
BITBANK1            80      0       0      0.0%
BANK0               80     59      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     157      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu May 15 21:22:34 2025

                      _a 0069                        _b 0067                        _c 0065  
                      _d 0063                        _e 0061                        _f 005F  
                      pc 0002             lcd_data@data 0072                       l41 03BF  
                     l50 04F8                       l53 04C7                       l47 0441  
                     l64 0496                       l67 038B                       l59 046A  
                     l98 037B             ___awdiv@sign 0075                       fsr 0004  
                    l102 0510                      l104 0513                      l107 0535  
                    l346 05EF                      l700 041A                      l359 058C  
                    l730 036A                      l707 03AC                      l719 06F7  
                    l656 03F5                      l694 07DD                      u500 05BC  
                    u501 05BB                      u520 05CD                      u600 0561  
                    u521 05CC                      u601 0560                      u610 056B  
                    u515 05BD                      u611 056A                      u540 05E1  
                    u460 0592                      u700 03A0                      u541 05E0  
                    u525 05C9                      u461 0591                      u701 039F  
                    u550 05E6                      u470 059D                      u630 057E  
                    u710 0708                      u551 05E5                      u535 05D5  
                    u471 059C                      u631 057D                      u615 0567  
                    u711 0707                      u480 05AC                      u640 0583  
                    u560 053B                      u800 07BC                      u720 0724  
                    u481 05AB                      u641 0582                      u625 0572  
                    u561 053A                      u801 07BB                      u721 0723  
                    u570 0546                      u650 0664                      u730 0730  
                    u810 0416                      u571 0545                      u651 0663  
                    u731 072F                      u811 0415                      u580 0551  
                    u660 066A                      u740 074A                      u900 0473  
                    u581 0550                      u661 0669                      u741 0748  
                    u670 0689                      u750 074B                      u830 046A  
                    u495 05B0                      u671 0688                      u831 0469  
                    u680 06BB                      u760 0786                      u681 06BA  
                    u761 0785                      u825 04E0                      u850 04FF  
                    u690 06DC                      u770 078B                      u851 04FE  
                    u595 0555                      u771 078A                      u860 050B  
                    u780 0790                      u861 050A                      u845 04AF  
                    u685 06B7                      u781 078F                      u917 04D5  
                    u870 0517                      u790 0795                      u871 0516  
                    u791 0794                      u927 04F0                      u880 0423  
                    u937 04A4                      u881 0422                      u890 042F  
                    u947 04BF                      u891 042E                      _abs 039C  
                    fsr0 0004             lcd_int@F1356 00CF                      indf 0000  
           ___awmod@sign 0075          ?_lcd_set_cursor 0073                     l1100 0561  
                   l1110 0583                     l1102 056B                     l1040 0597  
                   l1112 0588                     l1104 0571                     l1120 066A  
                   l1200 04C9                     l1050 05A6                     l1042 0599  
                   l1034 058D                     l1106 0578                     l1130 039C  
                   l1122 0671                     l1210 04DA                     l1202 04CE  
                   ?_abs 0076                     l1060 05BC                     l1052 05AC  
                   l1044 059D                     l1036 058E                     l1108 057E  
                   l1132 03A0                     l1124 0689                     l1116 065E  
                   l1140 0708                     l1220 04EC                     l1212 04DD  
                   l1204 04CF                     l1300 0428                     l1062 05CD  
                   l1054 05AF                     l1070 05E1                     l1046 05A2  
                   l1038 0592                     l1134 03A1                     l1126 06BB  
                   l1118 0664                     l1150 0724                     l1142 070C  
                   l1230 03DD                     l1222 04F5                     l1214 04E9  
                   l1206 04D0                     l1310 0482                     l1302 042F  
                   l1072 05E6                     l1064 05D3                     l1056 05B6  
                   l1048 05A4                     l1080 0537                     l1160 074C  
                   l1152 0730                     l1144 0710                     l1232 03DF  
                   l1224 03D3                     l1216 04EA                     l1208 04D1  
                   l1240 0444                     l1312 048D                     l1304 0433  
                   l1320 05FD                     l1250 049E                     l1074 05EB  
                   l1066 05D4                     l1058 05B8                     l1090 054B  
                   l1082 053B                     l1170 0790                     l1162 076B  
                   l1154 073E                     l1146 0714                     l1138 06F8  
                   l1234 03EC                     l1226 03D7                     l1218 04EB  
                   l1242 0455                     l1306 043B                     l1330 063A  
                   l1322 060B                     l1314 05F0                     l1260 04B8  
                   l1252 049F                     l1068 05DB                     l1092 0551  
                   l1084 0540                     l1172 0795                     l1164 0780  
                   l1156 0743                     l1180 07BD                     l1148 0718  
                   l1228 03DB                     l1244 0457                     l1308 046B  
                   l1332 0646                     l1324 0617                     l1316 05F3  
                   l1262 04B9                     l1254 04A0                     l1246 0498  
                   l1094 0554                     l1086 0542                     l1078 0536  
                   l1174 079E                     l1166 0786                     l1158 0745  
                   l1190 03F6                     l1270 037C                     l1238 0442  
                   l1334 064F                     l1326 0620                     l1318 05F8  
                   l1280 0505                     l1264 04BA                     l1256 04A9  
                   l1248 049D                     l1272 03AD                     l1096 055B  
                   l1088 0546                     l1176 07B2                     l1168 078B  
                   l1184 07C4                     l1192 03FB                     l1328 062B  
                   l1274 0373                     l1290 0531                     l1282 050B  
                   l1266 04BB                     l1258 04AC                     l1098 055D  
                   l1178 07B6                     l1194 040A                     l1284 0517  
                   l1276 04F9                     l1268 04C4                     l1196 0416  
                   l1286 0521                     l1278 04FF                     l1294 041B  
                   l1288 0530                     l1296 041D                     l1298 0423  
                   STR_1 0013                     STR_2 0013                     STR_3 001E  
                   abs@a 0076                     _dbuf 00A0                     _main 05F0  
           lcd_int@value 0045                     _prec 005D                     btemp 007E  
                   start 0000         __end_of_ADC_read 0536              lcd_string@i 0075  
                  ??_abs 0078                    ?_main 0070          __end_of___awdiv 05F0  
        __end_of___awmod 058D          ___awdiv@divisor 0070          ___awdiv@counter 0074  
           vfpfcnvrt@fmt 0022                    _PORTB 0006                    _TRISB 0086  
        __end_of_lcd_int 0497                    _flags 006F                    _fputc 065E  
                  _width 005B                    _putch 036A            lcd_int@string 004B  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 03F6          __initialization 07DE             __end_of_main 065E  
                 ??_main 007E                   _ADCON0 001F                   _ADCON1 009F  
       ??_integer_string 007E                   ?_fputc 0070                   _ADRESH 001E  
                 _ADRESL 009E         ___awdiv@dividend 0072                   ?_putch 0070  
          vfpfcnvrt@done 0026      integer_string@value 0042                ADC_read@a 0070  
       ??_ADC_initialise 0070         __end_of_lcd_data 04F9             vfprintf@cfmt 007D  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0076  
        ___awmod@divisor 0070          ___awmod@counter 0074                ??_lcd_int 0047  
                 fputc@c 0070                ?_ADC_read 0070                   putch@c 0070  
       __end_of_vfprintf 041B         ??_lcd_initialise 0073                ??_sprintf 0035  
          lcd_string@str 0073  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK1 038C            __end_of_fputc 06F8            __end_of_putch 036B  
       ??_lcd_set_cursor 0077               ??_ADC_read 0072                  ??_fputc 0074  
                ??_putch 0070               __pbssBANK0 005B               __pbssBANK1 00A0  
        lcd_command@cmnd 0072               __pmaintext 05F0                ?_lcd_data 0070  
             _lcd_string 0442     integer_string@string 0044               __stringtab 0003  
              _ADC_value 006B                  ___awdiv 058D                  ___awmod 0536  
              ?_vfprintf 002D                  __ptext1 041B                  __ptext2 046B  
                __ptext3 0442                  __ptext4 04C8                  __ptext5 037C  
                __ptext6 03D3                  __ptext7 03F6                  __ptext8 06F8  
                __ptext9 065E                  _lcd_int 046B         ___awmod@dividend 0072  
             ??_lcd_data 0070                  _sprintf 03D3                  clrloop0 036C  
   end_of_initialization 07FC                  fputc@fp 0072        __end_of_vfpfcnvrt 07DE  
       vfpfcnvrt@convarg 0028               ??_vfprintf 007D                _PORTBbits 0006  
            ?_lcd_string 0073            ??_lcd_command 0070              vfpfcnvrt@ap 0023  
            vfpfcnvrt@cp 0027              vfpfcnvrt@fp 0020      start_initialization 07DE  
            __end_of_abs 03AD              vfprintf@fmt 002F               init_fetch0 03C0  
    __end_of_lcd_command 04C8              __pdataBANK1 00CF                ___latbits 0002  
          __pcstackBANK0 0020                 ?___awdiv 0070                 ?___awmod 0070  
              __pstrings 0003                 ?_lcd_int 0045                 _ADC_data 006D  
               _ADC_read 04F9                 ?_sprintf 0031                clear_ram0 036B  
            _lcd_command 0497          lcd_set_cursor@a 0073          lcd_set_cursor@b 0075  
               _PIR1bits 000C                _vfpfcnvrt 06F8               _ADCON0bits 001F  
            __stringbase 0012             ??_lcd_string 0075               vfpfcnvrt@c 002C  
         _integer_string 037C               vfprintf@ap 0030               vfprintf@fp 002D  
             _ADC_string 00C0               ?_vfpfcnvrt 0020       __end_of_lcd_string 046B  
     __end_of__stringtab 0013           _ADC_initialise 0373       lcd_set_cursor@cmnd 0077  
             sprintf@fmt 0032                 __ptext10 036A                 __ptext11 039C  
               __ptext12 0536                 __ptext13 058D                 __ptext14 03AD  
               __ptext15 0497                 __ptext16 04F9                 __ptext17 0373  
               _lcd_data 04C8   __end_of_integer_string 038C           _lcd_initialise 03AD  
               _vfprintf 03F6   __end_of_ADC_initialise 037C                 init_ram0 03C4  
         _lcd_set_cursor 041B                sprintf@ap 0036   __end_of_lcd_initialise 03C0  
        ?_integer_string 0042                stringcode 000D              ??_vfpfcnvrt 0024  
        ?_ADC_initialise 0070                 sprintf@f 0037                 sprintf@s 0031  
               stringdir 000D                 stringtab 0003   __end_of_lcd_set_cursor 0442  
        ?_lcd_initialise 0070             ?_lcd_command 0070  
